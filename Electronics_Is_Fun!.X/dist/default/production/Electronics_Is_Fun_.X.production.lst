

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Apr 01 11:54:45 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F84A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	clrtext,global,class=CODE,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	swtext1,local,class=CONST,delta=2
    12                           	psect	swtext2,local,class=CONST,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	swtext3,local,class=CONST,delta=2
    21                           	dabs	1,0x4E,2
    22  0000                     
    23                           ; Version 1.44
    24                           ; Generated 14/09/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F84A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  0081                     	;# 
    69  0085                     	;# 
    70  0086                     	;# 
    71  0088                     	;# 
    72  0089                     	;# 
    73  0000                     	;# 
    74  0001                     	;# 
    75  0002                     	;# 
    76  0003                     	;# 
    77  0004                     	;# 
    78  0005                     	;# 
    79  0006                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  0005                     _PORTA	set	5
    90  0006                     _PORTB	set	6
    91  0001                     _TMR0	set	1
    92  000B                     _INTCON	set	11
    93  005A                     _T0IF	set	90
    94  005D                     _T0IE	set	93
    95  0030                     _RB0	set	48
    96  0059                     _INTF	set	89
    97  005C                     _INTE	set	92
    98  0085                     _TRISA	set	133
    99  0086                     _TRISB	set	134
   100  0081                     _OPTION_REG	set	129
   101                           
   102                           ; #config settings
   103  0000                     
   104                           	psect	cinit
   105  0010                     start_initialization:	
   106  0010                     __initialization:	
   107                           
   108                           ; Clear objects allocated to BANK0
   109  0010  1383               	bcf	3,7	;select IRP bank0
   110  0011  3019               	movlw	low __pbssBANK0
   111  0012  0084               	movwf	4
   112  0013  3025               	movlw	low (__pbssBANK0+12)
   113  0014  220A               	fcall	clear_ram0
   114  0015                     end_of_initialization:	
   115                           ;End of C runtime variable initialization code
   116                           
   117  0015                     __end_of__initialization:	
   118  0015  0183               	clrf	3
   119  0016  29D5               	ljmp	_main	;jump to C main() function
   120                           
   121                           	psect	bssBANK0
   122  0019                     __pbssBANK0:	
   123  0019                     _synced:	
   124  0019                     	ds	2
   125  001B                     _timerCount:	
   126  001B                     	ds	2
   127  001D                     _secNo:	
   128  001D                     	ds	2
   129  001F                     _minUnits:	
   130  001F                     	ds	1
   131  0020                     _minTens:	
   132  0020                     	ds	1
   133  0021                     _hourUnits:	
   134  0021                     	ds	1
   135  0022                     _hourTens:	
   136  0022                     	ds	1
   137  0023                     _bcdHour:	
   138  0023                     	ds	1
   139  0024                     _bcdMin:	
   140  0024                     	ds	1
   141                           
   142                           	psect	clrtext
   143  020A                     clear_ram0:	
   144                           ;	Called with FSR containing the base address, and
   145                           ;	W with the last address+1
   146                           
   147  020A  0064               	clrwdt	;clear the watchdog before getting into this loop
   148  020B                     clrloop0:	
   149  020B  0180               	clrf	0	;clear RAM location pointed to by FSR
   150  020C  0A84               	incf	4,f	;increment pointer
   151  020D  0604               	xorwf	4,w	;XOR with final address
   152  020E  1903               	btfsc	3,2	;have we reached the end yet?
   153  020F  3400               	retlw	0	;all done for this memory range, return
   154  0210  0604               	xorwf	4,w	;XOR again to restore value
   155  0211  2A0B               	goto	clrloop0	;do the next byte
   156                           
   157                           	psect	cstackCOMMON
   158  0000                     __pcstackCOMMON:	
   159  0000                     ??_init:	
   160  0000                     ??_resetTime:	
   161                           ; 1 bytes @ 0x0
   162                           
   163  0000                     ??_minMark:	
   164                           ; 1 bytes @ 0x0
   165                           
   166  0000                     ??_outputTime:	
   167                           ; 1 bytes @ 0x0
   168                           
   169  0000                     ??_setDisplayOutput:	
   170                           ; 1 bytes @ 0x0
   171                           
   172                           
   173                           	psect	cstackBANK0
   174  000C                     __pcstackBANK0:	
   175                           ; 1 bytes @ 0x0
   176                           
   177  000C                     ?_init:	
   178  000C                     ?_resetTime:	
   179                           ; 1 bytes @ 0x0
   180                           
   181  000C                     ?_minMark:	
   182                           ; 1 bytes @ 0x0
   183                           
   184  000C                     ?_outputTime:	
   185                           ; 1 bytes @ 0x0
   186                           
   187  000C                     ?_extInterrupt:	
   188                           ; 1 bytes @ 0x0
   189                           
   190  000C                     ?_setDisplayOutput:	
   191                           ; 1 bytes @ 0x0
   192                           
   193  000C                     ?_main:	
   194                           ; 1 bytes @ 0x0
   195                           
   196  000C                     setDisplayOutput@number:	
   197                           ; 2 bytes @ 0x0
   198                           
   199                           
   200                           ; 1 bytes @ 0x0
   201  000C                     	ds	1
   202  000D                     ??_extInterrupt:	
   203                           
   204                           ; 1 bytes @ 0x1
   205  000D                     	ds	7
   206  0014                     ?_updateTime:	
   207  0014                     updateTime@bcdMin:	
   208                           ; 1 bytes @ 0x8
   209                           
   210                           
   211                           ; 1 bytes @ 0x8
   212  0014                     	ds	1
   213  0015                     ??_updateTime:	
   214                           
   215                           ; 1 bytes @ 0x9
   216  0015                     	ds	1
   217  0016                     updateTime@hourTensDis:	
   218                           
   219                           ; 1 bytes @ 0xA
   220  0016                     	ds	1
   221  0017                     updateTime@bcdHour:	
   222                           
   223                           ; 1 bytes @ 0xB
   224  0017                     	ds	1
   225  0018                     ??_main:	
   226                           
   227                           ; 1 bytes @ 0xC
   228  0018                     	ds	1
   229                           
   230                           	psect	maintext
   231  01D5                     __pmaintext:	
   232 ;;
   233 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   234 ;;
   235 ;; *************** function _main *****************
   236 ;; Defined at:
   237 ;;		line 12 in file "Main.c"
   238 ;; Parameters:    Size  Location     Type
   239 ;;		None
   240 ;; Auto vars:     Size  Location     Type
   241 ;;		None
   242 ;; Return value:  Size  Location     Type
   243 ;;                  2   30[None  ] int 
   244 ;; Registers used:
   245 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   246 ;; Tracked objects:
   247 ;;		On entry : B00/0
   248 ;;		On exit  : 0/0
   249 ;;		Unchanged: 0/0
   250 ;; Data sizes:     COMMON   BANK0
   251 ;;      Params:         0       0
   252 ;;      Locals:         0       0
   253 ;;      Temps:          0       1
   254 ;;      Totals:         0       1
   255 ;;Total ram usage:        1 bytes
   256 ;; Hardware stack levels required when called:    4
   257 ;; This function calls:
   258 ;;		_init
   259 ;;		_minMark
   260 ;;		_resetTime
   261 ;;		_updateTime
   262 ;; This function is called by:
   263 ;;		Startup code after reset
   264 ;; This function uses a non-reentrant model
   265 ;;
   266                           
   267                           
   268                           ;psect for function _main
   269  01D5                     _main:	
   270                           
   271                           ;Main.c: 14: init();
   272                           
   273                           ;incstack = 0
   274                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   275  01D5  21A8               	fcall	_init
   276                           
   277                           ;Main.c: 15: resetTime();
   278  01D6  2212               	fcall	_resetTime
   279                           
   280                           ;Main.c: 16: minMark();
   281  01D7  218C               	fcall	_minMark
   282  01D8                     l1083:	
   283                           ;Main.c: 18: while(1){
   284                           
   285                           
   286                           ;Main.c: 20: if(secNo == 60){
   287  01D8  303C               	movlw	60
   288  01D9  1283               	bcf	3,5	;RP0=0, select bank0
   289  01DA  061D               	xorwf	_secNo,w
   290  01DB  041E               	iorwf	_secNo+1,w
   291  01DC  1D03               	btfss	3,2
   292  01DD  29D8               	goto	l1083
   293                           
   294                           ;Main.c: 21: updateTime(bcdHour,bcdMin);
   295  01DE  0824               	movf	_bcdMin,w
   296  01DF  0098               	movwf	??_main
   297  01E0  0818               	movf	??_main,w
   298  01E1  0094               	movwf	updateTime@bcdMin
   299  01E2  0823               	movf	_bcdHour,w
   300  01E3  2017               	fcall	_updateTime
   301                           
   302                           ;Main.c: 22: resetTime();
   303  01E4  2212               	fcall	_resetTime
   304  01E5  29D8               	goto	l1083
   305  01E6                     __end_of_main:	
   306                           ;Main.c: 23: }
   307                           ;Main.c: 26: }
   308                           ;Main.c: 30: return;
   309                           
   310                           
   311                           	psect	text1
   312  0017                     __ptext1:	
   313 ;; *************** function _updateTime *****************
   314 ;; Defined at:
   315 ;;		line 136 in file "Functions.c"
   316 ;; Parameters:    Size  Location     Type
   317 ;;  bcdHour         1    wreg     char 
   318 ;;  bcdMin          1    8[BANK0 ] char 
   319 ;; Auto vars:     Size  Location     Type
   320 ;;  bcdHour         1   11[BANK0 ] char 
   321 ;;  hourTensDis     1   10[BANK0 ] char 
   322 ;; Return value:  Size  Location     Type
   323 ;;                  1    wreg      void 
   324 ;; Registers used:
   325 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   326 ;; Tracked objects:
   327 ;;		On entry : 0/0
   328 ;;		On exit  : 0/0
   329 ;;		Unchanged: 0/0
   330 ;; Data sizes:     COMMON   BANK0
   331 ;;      Params:         0       1
   332 ;;      Locals:         0       2
   333 ;;      Temps:          0       1
   334 ;;      Totals:         0       4
   335 ;;Total ram usage:        4 bytes
   336 ;; Hardware stack levels used:    1
   337 ;; Hardware stack levels required when called:    3
   338 ;; This function calls:
   339 ;;		Nothing
   340 ;; This function is called by:
   341 ;;		_main
   342 ;; This function uses a non-reentrant model
   343 ;;
   344                           
   345                           
   346                           ;psect for function _updateTime
   347  0017                     _updateTime:	
   348                           
   349                           ;incstack = 0
   350                           ; Regs used in _updateTime: [wreg-fsr0h+status,2+status,0]
   351                           ;updateTime@bcdHour stored from wreg
   352  0017  1283               	bcf	3,5	;RP0=0, select bank0
   353  0018  0097               	movwf	updateTime@bcdHour
   354                           
   355                           ;Functions.c: 138: hourTens = (bcdHour & 0b00110000);
   356  0019  0817               	movf	updateTime@bcdHour,w
   357  001A  3930               	andlw	48
   358  001B  0095               	movwf	??_updateTime
   359  001C  0815               	movf	??_updateTime,w
   360  001D  00A2               	movwf	_hourTens
   361                           
   362                           ;Functions.c: 139: hourUnits = (bcdHour & 0b00001111);
   363  001E  0817               	movf	updateTime@bcdHour,w
   364  001F  390F               	andlw	15
   365  0020  0095               	movwf	??_updateTime
   366  0021  0815               	movf	??_updateTime,w
   367  0022  00A1               	movwf	_hourUnits
   368                           
   369                           ;Functions.c: 140: minTens = (bcdMin & 0b00110000);
   370  0023  0814               	movf	updateTime@bcdMin,w
   371  0024  3930               	andlw	48
   372  0025  0095               	movwf	??_updateTime
   373  0026  0815               	movf	??_updateTime,w
   374  0027  00A0               	movwf	_minTens
   375                           
   376                           ;Functions.c: 141: minUnits = (bcdMin & 0b00001111);
   377  0028  0814               	movf	updateTime@bcdMin,w
   378  0029  390F               	andlw	15
   379  002A  0095               	movwf	??_updateTime
   380  002B  0815               	movf	??_updateTime,w
   381  002C  009F               	movwf	_minUnits
   382                           
   383                           ;Functions.c: 142: signed char hourTensDis = hourTens;
   384  002D  0822               	movf	_hourTens,w
   385  002E  0095               	movwf	??_updateTime
   386  002F  0815               	movf	??_updateTime,w
   387  0030  0096               	movwf	updateTime@hourTensDis
   388                           
   389                           ;Functions.c: 144: switch(hourTens){
   390  0031  283E               	goto	l997
   391  0032                     l989:	
   392                           ;Functions.c: 145: case 0b00000000 :
   393                           
   394                           
   395                           ;Functions.c: 146: hourTens = 0;
   396  0032  01A2               	clrf	_hourTens
   397                           
   398                           ;Functions.c: 147: break;
   399  0033  2864               	goto	l1021
   400  0034                     l129:	
   401                           ;Functions.c: 148: case 0b00010000 :
   402                           
   403                           
   404                           ;Functions.c: 149: hourTens = 1;
   405  0034  01A2               	clrf	_hourTens
   406  0035  0AA2               	incf	_hourTens,f
   407                           
   408                           ;Functions.c: 150: break;
   409  0036  2864               	goto	l1021
   410  0037                     l991:	
   411                           ;Functions.c: 151: case 0b00100000 :
   412                           
   413                           
   414                           ;Functions.c: 152: hourTens = 2;
   415  0037  3002               	movlw	2
   416  0038  283A               	goto	L1
   417  0039                     l993:	
   418                           ;Functions.c: 154: default :
   419                           
   420                           ;Functions.c: 153: break;
   421                           
   422                           
   423                           ;Functions.c: 155: hourTens = 10;
   424  0039  300A               	movlw	10
   425  003A                     L1:	
   426  003A  0095               	movwf	??_updateTime
   427  003B  0815               	movf	??_updateTime,w
   428  003C  00A2               	movwf	_hourTens
   429                           
   430                           ;Functions.c: 157: }
   431                           
   432                           ;Functions.c: 156: break;
   433  003D  2864               	goto	l1021
   434  003E                     l997:	
   435  003E  0822               	movf	_hourTens,w
   436                           
   437                           ; Switch size 1, requested type "space"
   438                           ; Number of cases is 3, Range of values is 0 to 32
   439                           ; switch strategies available:
   440                           ; Name         Instructions Cycles
   441                           ; simple_byte           10     6 (average)
   442                           ; direct_byte           39     6 (fixed)
   443                           ; jumptable            260     6 (fixed)
   444                           ;	Chosen strategy is simple_byte
   445  003F  3A00               	xorlw	0	; case 0
   446  0040  1903               	skipnz
   447  0041  2832               	goto	l989
   448  0042  3A10               	xorlw	16	; case 16
   449  0043  1903               	skipnz
   450  0044  2834               	goto	l129
   451  0045  3A30               	xorlw	48	; case 32
   452  0046  1903               	skipnz
   453  0047  2837               	goto	l991
   454  0048  2839               	goto	l993
   455                           
   456                           ;Functions.c: 159: switch(hourUnits){
   457  0049  2864               	goto	l1021
   458  004A                     l999:	
   459                           ;Functions.c: 160: case 0b00000000 :
   460                           
   461                           
   462                           ;Functions.c: 161: hourUnits = 0;
   463  004A  01A1               	clrf	_hourUnits
   464                           
   465                           ;Functions.c: 162: break;
   466  004B  287C               	goto	l1031
   467  004C                     l135:	
   468                           ;Functions.c: 163: case 0b00000001:
   469                           
   470                           
   471                           ;Functions.c: 164: hourUnits = 1;
   472  004C  01A1               	clrf	_hourUnits
   473  004D  0AA1               	incf	_hourUnits,f
   474                           
   475                           ;Functions.c: 165: break;
   476  004E  287C               	goto	l1031
   477  004F                     l1001:	
   478                           ;Functions.c: 166: case 0b00000010:
   479                           
   480                           
   481                           ;Functions.c: 167: hourUnits = 2;
   482  004F  3002               	movlw	2
   483  0050  2860               	goto	L9
   484  0051                     l1003:	
   485                           ;Functions.c: 169: case 0b00000011:
   486                           
   487                           ;Functions.c: 168: break;
   488                           
   489                           
   490                           ;Functions.c: 170: hourUnits = 3;
   491  0051  3003               	movlw	3
   492  0052  2860               	goto	L9
   493  0053                     l1005:	
   494                           ;Functions.c: 172: case 0b00000100:
   495                           
   496                           ;Functions.c: 171: break;
   497                           
   498                           
   499                           ;Functions.c: 173: hourUnits = 4;
   500  0053  3004               	movlw	4
   501  0054  2860               	goto	L9
   502  0055                     l1007:	
   503                           ;Functions.c: 175: case 0b00000101:
   504                           
   505                           ;Functions.c: 174: break;
   506                           
   507                           
   508                           ;Functions.c: 176: hourUnits = 5;
   509  0055  3005               	movlw	5
   510  0056  2860               	goto	L9
   511  0057                     l1009:	
   512                           ;Functions.c: 178: case 0b00000110:
   513                           
   514                           ;Functions.c: 177: break;
   515                           
   516                           
   517                           ;Functions.c: 179: hourUnits = 6;
   518  0057  3006               	movlw	6
   519  0058  2860               	goto	L9
   520  0059                     l1011:	
   521                           ;Functions.c: 181: case 0b00000111:
   522                           
   523                           ;Functions.c: 180: break;
   524                           
   525                           
   526                           ;Functions.c: 182: hourUnits = 7;
   527  0059  3007               	movlw	7
   528  005A  2860               	goto	L9
   529  005B                     l1013:	
   530                           ;Functions.c: 184: case 0b00001000:
   531                           
   532                           ;Functions.c: 183: break;
   533                           
   534                           
   535                           ;Functions.c: 185: hourUnits = 8;
   536  005B  3008               	movlw	8
   537  005C  2860               	goto	L9
   538  005D                     l1015:	
   539                           ;Functions.c: 187: case 0b00001001:
   540                           
   541                           ;Functions.c: 186: break;
   542                           
   543                           
   544                           ;Functions.c: 188: hourUnits = 9;
   545  005D  3009               	movlw	9
   546  005E  2860               	goto	L9
   547  005F                     l1017:	
   548                           ;Functions.c: 190: default :
   549                           
   550                           ;Functions.c: 189: break;
   551                           
   552                           
   553                           ;Functions.c: 191: hourUnits = 10;
   554  005F  300A               	movlw	10
   555  0060                     L9:	
   556  0060  0095               	movwf	??_updateTime
   557  0061  0815               	movf	??_updateTime,w
   558  0062  00A1               	movwf	_hourUnits
   559                           
   560                           ;Functions.c: 193: }
   561                           
   562                           ;Functions.c: 192: break;
   563  0063  287C               	goto	l1031
   564  0064                     l1021:	
   565  0064  0821               	movf	_hourUnits,w
   566                           
   567                           ; Switch size 1, requested type "space"
   568                           ; Number of cases is 10, Range of values is 0 to 9
   569                           ; switch strategies available:
   570                           ; Name         Instructions Cycles
   571                           ; direct_byte           16     6 (fixed)
   572                           ; simple_byte           31    16 (average)
   573                           ; jumptable            260     6 (fixed)
   574                           ;	Chosen strategy is direct_byte
   575  0065  0084               	movwf	4
   576  0066  300A               	movlw	10
   577  0067  0204               	subwf	4,w
   578  0068  1803               	skipnc
   579  0069  285F               	goto	l1017
   580  006A  3001               	movlw	high S1199
   581  006B  008A               	movwf	10
   582  006C  30F1               	movlw	low S1199
   583  006D  0704               	addwf	4,w
   584  006E  0082               	movwf	2
   585                           
   586                           ;Functions.c: 195: switch(minTens){
   587  006F  287C               	goto	l1031
   588  0070                     l1023:	
   589                           ;Functions.c: 196: case 0b00000000 :
   590                           
   591                           
   592                           ;Functions.c: 197: minTens = 0;
   593  0070  01A0               	clrf	_minTens
   594                           
   595                           ;Functions.c: 198: break;
   596  0071  28BA               	goto	l1055
   597  0072                     l148:	
   598                           ;Functions.c: 199: case 0b00010000 :
   599                           
   600                           
   601                           ;Functions.c: 200: minTens = 1;
   602  0072  01A0               	clrf	_minTens
   603  0073  0AA0               	incf	_minTens,f
   604                           
   605                           ;Functions.c: 201: break;
   606  0074  28BA               	goto	l1055
   607  0075                     l1025:	
   608                           ;Functions.c: 202: case 0b00100000 :
   609                           
   610                           
   611                           ;Functions.c: 203: minTens = 2;
   612  0075  3002               	movlw	2
   613  0076  2878               	goto	L10
   614  0077                     l1027:	
   615                           ;Functions.c: 205: default :
   616                           
   617                           ;Functions.c: 204: break;
   618                           
   619                           
   620                           ;Functions.c: 206: minTens = 10;
   621  0077  300A               	movlw	10
   622  0078                     L10:	
   623  0078  0095               	movwf	??_updateTime
   624  0079  0815               	movf	??_updateTime,w
   625  007A  00A0               	movwf	_minTens
   626                           
   627                           ;Functions.c: 208: }
   628                           
   629                           ;Functions.c: 207: break;
   630  007B  28BA               	goto	l1055
   631  007C                     l1031:	
   632  007C  0820               	movf	_minTens,w
   633                           
   634                           ; Switch size 1, requested type "space"
   635                           ; Number of cases is 3, Range of values is 0 to 32
   636                           ; switch strategies available:
   637                           ; Name         Instructions Cycles
   638                           ; simple_byte           10     6 (average)
   639                           ; direct_byte           39     6 (fixed)
   640                           ; jumptable            260     6 (fixed)
   641                           ;	Chosen strategy is simple_byte
   642  007D  3A00               	xorlw	0	; case 0
   643  007E  1903               	skipnz
   644  007F  2870               	goto	l1023
   645  0080  3A10               	xorlw	16	; case 16
   646  0081  1903               	skipnz
   647  0082  2872               	goto	l148
   648  0083  3A30               	xorlw	48	; case 32
   649  0084  1903               	skipnz
   650  0085  2875               	goto	l1025
   651  0086  2877               	goto	l1027
   652                           
   653                           ;Functions.c: 211: switch(minUnits){
   654  0087  28BA               	goto	l1055
   655  0088                     l1033:	
   656                           ;Functions.c: 212: case 0b00000000 :
   657                           
   658                           
   659                           ;Functions.c: 213: minUnits = 0;
   660  0088  019F               	clrf	_minUnits
   661                           
   662                           ;Functions.c: 214: break;
   663  0089  0008               	return
   664  008A                     l154:	
   665                           ;Functions.c: 215: case 0b00000001:
   666                           
   667                           
   668                           ;Functions.c: 216: minUnits = 1;
   669  008A  019F               	clrf	_minUnits
   670  008B  0A9F               	incf	_minUnits,f
   671                           
   672                           ;Functions.c: 217: break;
   673  008C  0008               	return
   674  008D                     l1035:	
   675                           ;Functions.c: 218: case 0b00000010:
   676                           
   677                           
   678                           ;Functions.c: 219: minUnits = 2;
   679  008D  3002               	movlw	2
   680  008E  0095               	movwf	??_updateTime
   681  008F  0815               	movf	??_updateTime,w
   682  0090  009F               	movwf	_minUnits
   683                           
   684                           ;Functions.c: 220: break;
   685  0091  0008               	return
   686  0092                     l1037:	
   687                           ;Functions.c: 221: case 0b00000011:
   688                           
   689                           
   690                           ;Functions.c: 222: minUnits = 3;
   691  0092  3003               	movlw	3
   692  0093  0095               	movwf	??_updateTime
   693  0094  0815               	movf	??_updateTime,w
   694  0095  009F               	movwf	_minUnits
   695                           
   696                           ;Functions.c: 223: break;
   697  0096  0008               	return
   698  0097                     l1039:	
   699                           ;Functions.c: 224: case 0b00000100:
   700                           
   701                           
   702                           ;Functions.c: 225: minUnits = 4;
   703  0097  3004               	movlw	4
   704  0098  0095               	movwf	??_updateTime
   705  0099  0815               	movf	??_updateTime,w
   706  009A  009F               	movwf	_minUnits
   707                           
   708                           ;Functions.c: 226: break;
   709  009B  0008               	return
   710  009C                     l1041:	
   711                           ;Functions.c: 227: case 0b00000101:
   712                           
   713                           
   714                           ;Functions.c: 228: minUnits = 5;
   715  009C  3005               	movlw	5
   716  009D  0095               	movwf	??_updateTime
   717  009E  0815               	movf	??_updateTime,w
   718  009F  009F               	movwf	_minUnits
   719                           
   720                           ;Functions.c: 229: break;
   721  00A0  0008               	return
   722  00A1                     l1043:	
   723                           ;Functions.c: 230: case 0b00000110:
   724                           
   725                           
   726                           ;Functions.c: 231: minUnits = 6;
   727  00A1  3006               	movlw	6
   728  00A2  0095               	movwf	??_updateTime
   729  00A3  0815               	movf	??_updateTime,w
   730  00A4  009F               	movwf	_minUnits
   731                           
   732                           ;Functions.c: 232: break;
   733  00A5  0008               	return
   734  00A6                     l1045:	
   735                           ;Functions.c: 233: case 0b00000111:
   736                           
   737                           
   738                           ;Functions.c: 234: minUnits = 7;
   739  00A6  3007               	movlw	7
   740  00A7  0095               	movwf	??_updateTime
   741  00A8  0815               	movf	??_updateTime,w
   742  00A9  009F               	movwf	_minUnits
   743                           
   744                           ;Functions.c: 235: break;
   745  00AA  0008               	return
   746  00AB                     l1047:	
   747                           ;Functions.c: 236: case 0b00001000:
   748                           
   749                           
   750                           ;Functions.c: 237: minUnits = 8;
   751  00AB  3008               	movlw	8
   752  00AC  0095               	movwf	??_updateTime
   753  00AD  0815               	movf	??_updateTime,w
   754  00AE  009F               	movwf	_minUnits
   755                           
   756                           ;Functions.c: 238: break;
   757  00AF  0008               	return
   758  00B0                     l1049:	
   759                           ;Functions.c: 239: case 0b00001001:
   760                           
   761                           
   762                           ;Functions.c: 240: minUnits = 9;
   763  00B0  3009               	movlw	9
   764  00B1  0095               	movwf	??_updateTime
   765  00B2  0815               	movf	??_updateTime,w
   766  00B3  009F               	movwf	_minUnits
   767                           
   768                           ;Functions.c: 241: break;
   769  00B4  0008               	return
   770  00B5                     l1051:	
   771                           ;Functions.c: 242: default :
   772                           
   773                           
   774                           ;Functions.c: 243: minUnits = 10;
   775  00B5  300A               	movlw	10
   776  00B6  0095               	movwf	??_updateTime
   777  00B7  0815               	movf	??_updateTime,w
   778  00B8  009F               	movwf	_minUnits
   779                           
   780                           ;Functions.c: 245: }
   781                           
   782                           ;Functions.c: 244: break;
   783  00B9  0008               	return
   784  00BA                     l1055:	
   785  00BA  081F               	movf	_minUnits,w
   786                           
   787                           ; Switch size 1, requested type "space"
   788                           ; Number of cases is 10, Range of values is 0 to 9
   789                           ; switch strategies available:
   790                           ; Name         Instructions Cycles
   791                           ; direct_byte           16     6 (fixed)
   792                           ; simple_byte           31    16 (average)
   793                           ; jumptable            260     6 (fixed)
   794                           ;	Chosen strategy is direct_byte
   795  00BB  0084               	movwf	4
   796  00BC  300A               	movlw	10
   797  00BD  0204               	subwf	4,w
   798  00BE  1803               	skipnc
   799  00BF  28B5               	goto	l1051
   800  00C0  3002               	movlw	high S1201
   801  00C1  008A               	movwf	10
   802  00C2  3000               	movlw	low S1201
   803  00C3  0704               	addwf	4,w
   804  00C4  0082               	movwf	2
   805  00C5  0008               	return
   806  00C6                     __end_of_updateTime:	
   807                           
   808                           	psect	swtext1
   809  01F1                     __pswtext1:	
   810  01F1                     S1199:	
   811  01F1  284A               	ljmp	l999
   812  01F2  284C               	ljmp	l135
   813  01F3  284F               	ljmp	l1001
   814  01F4  2851               	ljmp	l1003
   815  01F5  2853               	ljmp	l1005
   816  01F6  2855               	ljmp	l1007
   817  01F7  2857               	ljmp	l1009
   818  01F8  2859               	ljmp	l1011
   819  01F9  285B               	ljmp	l1013
   820  01FA  285D               	ljmp	l1015
   821                           
   822                           	psect	swtext2
   823  0200                     __pswtext2:	
   824  0200                     S1201:	
   825  0200  2888               	ljmp	l1033
   826  0201  288A               	ljmp	l154
   827  0202  288D               	ljmp	l1035
   828  0203  2892               	ljmp	l1037
   829  0204  2897               	ljmp	l1039
   830  0205  289C               	ljmp	l1041
   831  0206  28A1               	ljmp	l1043
   832  0207  28A6               	ljmp	l1045
   833  0208  28AB               	ljmp	l1047
   834  0209  28B0               	ljmp	l1049
   835                           
   836                           	psect	text2
   837  0212                     __ptext2:	
   838 ;; *************** function _resetTime *****************
   839 ;; Defined at:
   840 ;;		line 65 in file "Functions.c"
   841 ;; Parameters:    Size  Location     Type
   842 ;;		None
   843 ;; Auto vars:     Size  Location     Type
   844 ;;		None
   845 ;; Return value:  Size  Location     Type
   846 ;;                  1    wreg      void 
   847 ;; Registers used:
   848 ;;		status,2
   849 ;; Tracked objects:
   850 ;;		On entry : 0/0
   851 ;;		On exit  : 0/0
   852 ;;		Unchanged: 0/0
   853 ;; Data sizes:     COMMON   BANK0
   854 ;;      Params:         0       0
   855 ;;      Locals:         0       0
   856 ;;      Temps:          0       0
   857 ;;      Totals:         0       0
   858 ;;Total ram usage:        0 bytes
   859 ;; Hardware stack levels used:    1
   860 ;; Hardware stack levels required when called:    3
   861 ;; This function calls:
   862 ;;		Nothing
   863 ;; This function is called by:
   864 ;;		_main
   865 ;; This function uses a non-reentrant model
   866 ;;
   867                           
   868                           
   869                           ;psect for function _resetTime
   870  0212                     _resetTime:	
   871                           
   872                           ;Functions.c: 67: bcdMin = 0x00;
   873                           
   874                           ;incstack = 0
   875                           ; Regs used in _resetTime: [status,2]
   876  0212  1283               	bcf	3,5	;RP0=0, select bank0
   877  0213  01A4               	clrf	_bcdMin
   878                           
   879                           ;Functions.c: 68: bcdHour = 0x00;
   880  0214  01A3               	clrf	_bcdHour
   881                           
   882                           ;Functions.c: 69: secNo = 0;
   883  0215  019D               	clrf	_secNo
   884  0216  019E               	clrf	_secNo+1
   885  0217  0008               	return
   886  0218                     __end_of_resetTime:	
   887                           ;Functions.c: 70: return;
   888                           
   889                           
   890                           	psect	text3
   891  018C                     __ptext3:	
   892 ;; *************** function _minMark *****************
   893 ;; Defined at:
   894 ;;		line 73 in file "Functions.c"
   895 ;; Parameters:    Size  Location     Type
   896 ;;		None
   897 ;; Auto vars:     Size  Location     Type
   898 ;;		None
   899 ;; Return value:  Size  Location     Type
   900 ;;                  1    wreg      void 
   901 ;; Registers used:
   902 ;;		wreg, status,2, status,0
   903 ;; Tracked objects:
   904 ;;		On entry : 0/0
   905 ;;		On exit  : 0/0
   906 ;;		Unchanged: 0/0
   907 ;; Data sizes:     COMMON   BANK0
   908 ;;      Params:         0       0
   909 ;;      Locals:         0       0
   910 ;;      Temps:          0       0
   911 ;;      Totals:         0       0
   912 ;;Total ram usage:        0 bytes
   913 ;; Hardware stack levels used:    1
   914 ;; Hardware stack levels required when called:    3
   915 ;; This function calls:
   916 ;;		Nothing
   917 ;; This function is called by:
   918 ;;		_main
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922                           
   923                           ;psect for function _minMark
   924  018C                     _minMark:	
   925                           
   926                           ;Functions.c: 75: synced = 0;
   927                           
   928                           ;incstack = 0
   929                           ; Regs used in _minMark: [wreg+status,2+status,0]
   930  018C  1283               	bcf	3,5	;RP0=0, select bank0
   931  018D  0199               	clrf	_synced
   932  018E  019A               	clrf	_synced+1
   933  018F                     l969:	
   934                           ;Functions.c: 76: do{
   935                           
   936                           
   937                           ;Functions.c: 78: if(RB0 == 0 && synced == 0){
   938  018F  1806               	btfsc	6,0	;volatile
   939  0190  2997               	goto	l975
   940  0191  0819               	movf	_synced,w
   941  0192  041A               	iorwf	_synced+1,w
   942  0193  1D03               	btfss	3,2
   943  0194  2997               	goto	l975
   944                           
   945                           ;Functions.c: 79: INTCON |= 0b00100000;
   946  0195  168B               	bsf	11,5	;volatile
   947                           
   948                           ;Functions.c: 80: }
   949  0196  29A1               	goto	l981
   950  0197                     l975:	
   951                           
   952                           ;Functions.c: 81: else{
   953                           ;Functions.c: 82: INTCON = 0b10010000;
   954  0197  3090               	movlw	144
   955  0198  008B               	movwf	11	;volatile
   956                           
   957                           ;Functions.c: 83: TMR0 = 230;
   958  0199  30E6               	movlw	230
   959  019A  0081               	movwf	1	;volatile
   960                           
   961                           ;Functions.c: 84: timerCount = 0;
   962  019B  019B               	clrf	_timerCount
   963  019C  019C               	clrf	_timerCount+1
   964                           
   965                           ;Functions.c: 85: synced = 1;
   966  019D  3001               	movlw	1
   967  019E  0099               	movwf	_synced
   968  019F  3000               	movlw	0
   969  01A0  009A               	movwf	_synced+1
   970  01A1                     l981:	
   971                           
   972                           ;Functions.c: 86: }
   973                           ;Functions.c: 88: }while (!(RB0 == 0 && synced == 1));
   974  01A1  1806               	btfsc	6,0	;volatile
   975  01A2  298F               	goto	l969
   976  01A3  0319               	decf	_synced,w
   977  01A4  041A               	iorwf	_synced+1,w
   978  01A5  1903               	btfsc	3,2
   979  01A6  0008               	return
   980  01A7  298F               	goto	l969
   981  01A8                     __end_of_minMark:	
   982                           ;Functions.c: 89: return;
   983                           
   984                           
   985                           	psect	text4
   986  01A8                     __ptext4:	
   987 ;; *************** function _init *****************
   988 ;; Defined at:
   989 ;;		line 3 in file "Functions.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;		None
   992 ;; Auto vars:     Size  Location     Type
   993 ;;		None
   994 ;; Return value:  Size  Location     Type
   995 ;;                  1    wreg      void 
   996 ;; Registers used:
   997 ;;		wreg, status,2
   998 ;; Tracked objects:
   999 ;;		On entry : 0/0
  1000 ;;		On exit  : 0/0
  1001 ;;		Unchanged: 0/0
  1002 ;; Data sizes:     COMMON   BANK0
  1003 ;;      Params:         0       0
  1004 ;;      Locals:         0       0
  1005 ;;      Temps:          0       0
  1006 ;;      Totals:         0       0
  1007 ;;Total ram usage:        0 bytes
  1008 ;; Hardware stack levels used:    1
  1009 ;; Hardware stack levels required when called:    3
  1010 ;; This function calls:
  1011 ;;		Nothing
  1012 ;; This function is called by:
  1013 ;;		_main
  1014 ;; This function uses a non-reentrant model
  1015 ;;
  1016                           
  1017                           
  1018                           ;psect for function _init
  1019  01A8                     _init:	
  1020                           
  1021                           ;Functions.c: 5: OPTION_REG = 0b00000111;
  1022                           
  1023                           ;incstack = 0
  1024                           ; Regs used in _init: [wreg+status,2]
  1025  01A8  3007               	movlw	7
  1026  01A9  1683               	bsf	3,5	;RP0=1, select bank1
  1027  01AA  0081               	movwf	1	;volatile
  1028                           
  1029                           ;Functions.c: 7: INTCON = 0b10000000;
  1030  01AB  3080               	movlw	128
  1031  01AC  008B               	movwf	11	;volatile
  1032                           
  1033                           ;Functions.c: 9: TMR0 = 230;
  1034  01AD  30E6               	movlw	230
  1035  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  1036  01AF  0081               	movwf	1	;volatile
  1037                           
  1038                           ;Functions.c: 11: TRISB = 0b00000001;
  1039  01B0  3001               	movlw	1
  1040  01B1  1683               	bsf	3,5	;RP0=1, select bank1
  1041  01B2  0086               	movwf	6	;volatile
  1042                           
  1043                           ;Functions.c: 12: PORTB = 0x00;
  1044  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  1045  01B4  0186               	clrf	6	;volatile
  1046                           
  1047                           ;Functions.c: 15: TRISA = 0x00;
  1048  01B5  1683               	bsf	3,5	;RP0=1, select bank1
  1049  01B6  0185               	clrf	5	;volatile
  1050                           
  1051                           ;Functions.c: 16: PORTA = 0x00;
  1052  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  1053  01B8  0185               	clrf	5	;volatile
  1054                           
  1055                           ;Functions.c: 18: bcdMin = 0x00;
  1056  01B9  01A4               	clrf	_bcdMin
  1057                           
  1058                           ;Functions.c: 19: bcdHour = 0x00;
  1059  01BA  01A3               	clrf	_bcdHour
  1060                           
  1061                           ;Functions.c: 21: synced = 0;
  1062  01BB  0199               	clrf	_synced
  1063  01BC  019A               	clrf	_synced+1
  1064                           
  1065                           ;Functions.c: 22: INTCON = 0b10010000;
  1066  01BD  3090               	movlw	144
  1067  01BE  008B               	movwf	11	;volatile
  1068  01BF  0008               	return
  1069  01C0                     __end_of_init:	
  1070                           
  1071                           	psect	text5
  1072  00C6                     __ptext5:	
  1073 ;; *************** function _extInterrupt *****************
  1074 ;; Defined at:
  1075 ;;		line 25 in file "Functions.c"
  1076 ;; Parameters:    Size  Location     Type
  1077 ;;		None
  1078 ;; Auto vars:     Size  Location     Type
  1079 ;;		None
  1080 ;; Return value:  Size  Location     Type
  1081 ;;                  1    wreg      void 
  1082 ;; Registers used:
  1083 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1084 ;; Tracked objects:
  1085 ;;		On entry : 0/0
  1086 ;;		On exit  : 0/0
  1087 ;;		Unchanged: 0/0
  1088 ;; Data sizes:     COMMON   BANK0
  1089 ;;      Params:         0       0
  1090 ;;      Locals:         0       0
  1091 ;;      Temps:          0       7
  1092 ;;      Totals:         0       7
  1093 ;;Total ram usage:        7 bytes
  1094 ;; Hardware stack levels used:    1
  1095 ;; Hardware stack levels required when called:    2
  1096 ;; This function calls:
  1097 ;;		_outputTime
  1098 ;; This function is called by:
  1099 ;;		Interrupt level 1
  1100 ;; This function uses a non-reentrant model
  1101 ;;
  1102                           
  1103                           
  1104                           ;psect for function _extInterrupt
  1105  00C6                     _extInterrupt:	
  1106                           
  1107                           ;Functions.c: 27: if (INTE && INTF){
  1108  00C6  1A0B               	btfsc	11,4	;volatile
  1109  00C7  1C8B               	btfss	11,1	;volatile
  1110  00C8  2936               	goto	i1l89
  1111                           
  1112                           ;Functions.c: 28: INTF = 0;
  1113  00C9  108B               	bcf	11,1	;volatile
  1114                           
  1115                           ;Functions.c: 30: if(synced == 1){
  1116  00CA  0319               	decf	_synced,w
  1117  00CB  041A               	iorwf	_synced+1,w
  1118  00CC  1D03               	btfss	3,2
  1119  00CD  2936               	goto	i1l89
  1120                           
  1121                           ;Functions.c: 31: secNo++;
  1122  00CE  3001               	movlw	1
  1123  00CF  079D               	addwf	_secNo,f
  1124  00D0  1803               	skipnc
  1125  00D1  0A9E               	incf	_secNo+1,f
  1126  00D2  3000               	movlw	0
  1127  00D3  079E               	addwf	_secNo+1,f
  1128                           
  1129                           ;Functions.c: 32: _delay((unsigned long)((150)*(4000000/4000.0)));
  1130  00D4  30C3               	movlw	195
  1131  00D5  008E               	movwf	??_extInterrupt+1
  1132  00D6  30CD               	movlw	205
  1133  00D7  008D               	movwf	??_extInterrupt
  1134  00D8                     u31_27:	
  1135  00D8  0B8D               	decfsz	??_extInterrupt,f
  1136  00D9  28D8               	goto	u31_27
  1137  00DA  0B8E               	decfsz	??_extInterrupt+1,f
  1138  00DB  28D8               	goto	u31_27
  1139                           
  1140                           ;Functions.c: 34: if(secNo > 1 && secNo < 6 )
  1141  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  1142  00DD  081E               	movf	_secNo+1,w
  1143  00DE  3A80               	xorlw	128
  1144  00DF  00CF               	movwf	79
  1145  00E0  3080               	movlw	128
  1146  00E1  024F               	subwf	79,w
  1147  00E2  1D03               	skipz
  1148  00E3  28E6               	goto	u24_25
  1149  00E4  3002               	movlw	2
  1150  00E5  021D               	subwf	_secNo,w
  1151  00E6                     u24_25:	
  1152  00E6  1C03               	skipc
  1153  00E7  2902               	goto	i1l1105
  1154  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  1155  00E9  081E               	movf	_secNo+1,w
  1156  00EA  3A80               	xorlw	128
  1157  00EB  00CF               	movwf	79
  1158  00EC  3080               	movlw	128
  1159  00ED  024F               	subwf	79,w
  1160  00EE  1D03               	skipz
  1161  00EF  28F2               	goto	u25_25
  1162  00F0  3006               	movlw	6
  1163  00F1  021D               	subwf	_secNo,w
  1164  00F2                     u25_25:	
  1165  00F2  1803               	skipnc
  1166  00F3  2902               	goto	i1l1105
  1167                           
  1168                           ;Functions.c: 35: {
  1169                           ;Functions.c: 36: bcdHour |= RB0;
  1170  00F4  3000               	movlw	0
  1171  00F5  1283               	bcf	3,5	;RP0=0, select bank0
  1172  00F6  1806               	btfsc	6,0	;volatile
  1173  00F7  3001               	movlw	1
  1174  00F8  008D               	movwf	??_extInterrupt
  1175  00F9  080D               	movf	??_extInterrupt,w
  1176  00FA  04A3               	iorwf	_bcdHour,f
  1177                           
  1178                           ;Functions.c: 37: bcdHour = bcdHour << 1;
  1179  00FB  0823               	movf	_bcdHour,w
  1180  00FC  008D               	movwf	??_extInterrupt
  1181  00FD  070D               	addwf	??_extInterrupt,w
  1182  00FE  008E               	movwf	??_extInterrupt+1
  1183  00FF  080E               	movf	??_extInterrupt+1,w
  1184  0100  00A3               	movwf	_bcdHour
  1185                           
  1186                           ;Functions.c: 38: }
  1187  0101  2927               	goto	i1l1111
  1188  0102                     i1l1105:	
  1189                           
  1190                           ;Functions.c: 39: else if(secNo > 44 && secNo < 60)
  1191  0102  1283               	bcf	3,5	;RP0=0, select bank0
  1192  0103  081E               	movf	_secNo+1,w
  1193  0104  3A80               	xorlw	128
  1194  0105  00CF               	movwf	79
  1195  0106  3080               	movlw	128
  1196  0107  024F               	subwf	79,w
  1197  0108  1D03               	skipz
  1198  0109  290C               	goto	u26_25
  1199  010A  302D               	movlw	45
  1200  010B  021D               	subwf	_secNo,w
  1201  010C                     u26_25:	
  1202  010C  1C03               	skipc
  1203  010D  2927               	goto	i1l1111
  1204  010E  1283               	bcf	3,5	;RP0=0, select bank0
  1205  010F  081E               	movf	_secNo+1,w
  1206  0110  3A80               	xorlw	128
  1207  0111  00CF               	movwf	79
  1208  0112  3080               	movlw	128
  1209  0113  024F               	subwf	79,w
  1210  0114  1D03               	skipz
  1211  0115  2918               	goto	u27_25
  1212  0116  303C               	movlw	60
  1213  0117  021D               	subwf	_secNo,w
  1214  0118                     u27_25:	
  1215  0118  1803               	skipnc
  1216  0119  2927               	goto	i1l1111
  1217                           
  1218                           ;Functions.c: 40: {
  1219                           ;Functions.c: 41: bcdMin |= RB0;
  1220  011A  3000               	movlw	0
  1221  011B  1283               	bcf	3,5	;RP0=0, select bank0
  1222  011C  1806               	btfsc	6,0	;volatile
  1223  011D  3001               	movlw	1
  1224  011E  008D               	movwf	??_extInterrupt
  1225  011F  080D               	movf	??_extInterrupt,w
  1226  0120  04A4               	iorwf	_bcdMin,f
  1227                           
  1228                           ;Functions.c: 42: bcdMin = bcdMin << 1;
  1229  0121  0824               	movf	_bcdMin,w
  1230  0122  008D               	movwf	??_extInterrupt
  1231  0123  070D               	addwf	??_extInterrupt,w
  1232  0124  008E               	movwf	??_extInterrupt+1
  1233  0125  080E               	movf	??_extInterrupt+1,w
  1234  0126  00A4               	movwf	_bcdMin
  1235  0127                     i1l1111:	
  1236                           
  1237                           ;Functions.c: 43: }
  1238                           ;Functions.c: 44: _delay((unsigned long)((200)*(4000000/4000.0)));
  1239  0127  3002               	movlw	2
  1240  0128  1283               	bcf	3,5	;RP0=0, select bank0
  1241  0129  008F               	movwf	??_extInterrupt+2
  1242  012A  3004               	movlw	4
  1243  012B  008E               	movwf	??_extInterrupt+1
  1244  012C  30BA               	movlw	186
  1245  012D  008D               	movwf	??_extInterrupt
  1246  012E                     u32_27:	
  1247  012E  0B8D               	decfsz	??_extInterrupt,f
  1248  012F  292E               	goto	u32_27
  1249  0130  0B8E               	decfsz	??_extInterrupt+1,f
  1250  0131  292E               	goto	u32_27
  1251  0132  0B8F               	decfsz	??_extInterrupt+2,f
  1252  0133  292E               	goto	u32_27
  1253  0134  0000               	nop
  1254                           
  1255                           ;Functions.c: 45: return;
  1256  0135  294D               	goto	i1l94
  1257  0136                     i1l89:	
  1258                           
  1259                           ;Functions.c: 46: }
  1260                           ;Functions.c: 48: }
  1261                           ;Functions.c: 49: if (T0IE && T0IF){
  1262  0136  1A8B               	btfsc	11,5	;volatile
  1263  0137  1D0B               	btfss	11,2	;volatile
  1264  0138  294D               	goto	i1l94
  1265                           
  1266                           ;Functions.c: 50: T0IF = 0;
  1267  0139  110B               	bcf	11,2	;volatile
  1268                           
  1269                           ;Functions.c: 51: timerCount++;
  1270  013A  3001               	movlw	1
  1271  013B  1283               	bcf	3,5	;RP0=0, select bank0
  1272  013C  079B               	addwf	_timerCount,f
  1273  013D  1803               	skipnc
  1274  013E  0A9C               	incf	_timerCount+1,f
  1275  013F  3000               	movlw	0
  1276  0140  079C               	addwf	_timerCount+1,f
  1277                           
  1278                           ;Functions.c: 53: if (timerCount == 7){
  1279  0141  3007               	movlw	7
  1280  0142  061B               	xorwf	_timerCount,w
  1281  0143  041C               	iorwf	_timerCount+1,w
  1282  0144  1D03               	btfss	3,2
  1283  0145  294C               	goto	i1l1127
  1284                           
  1285                           ;Functions.c: 54: timerCount = 0;
  1286  0146  019B               	clrf	_timerCount
  1287  0147  019C               	clrf	_timerCount+1
  1288                           
  1289                           ;Functions.c: 56: synced = 1;
  1290  0148  3001               	movlw	1
  1291  0149  0099               	movwf	_synced
  1292  014A  3000               	movlw	0
  1293  014B  009A               	movwf	_synced+1
  1294  014C                     i1l1127:	
  1295                           
  1296                           ;Functions.c: 58: }
  1297                           ;Functions.c: 59: outputTime();
  1298  014C  21C0               	fcall	_outputTime
  1299  014D                     i1l94:	
  1300  014D  1283               	bcf	3,5	;RP0=0, select bank0
  1301  014E  0813               	movf	??_extInterrupt+6,w
  1302  014F  00CF               	movwf	79
  1303  0150  0812               	movf	??_extInterrupt+5,w
  1304  0151  008A               	movwf	10
  1305  0152  0811               	movf	??_extInterrupt+4,w
  1306  0153  0084               	movwf	4
  1307  0154  0E10               	swapf	(??_extInterrupt+3)^0,w
  1308  0155  0083               	movwf	3
  1309  0156  0ECE               	swapf	78,f
  1310  0157  0E4E               	swapf	78,w
  1311  0158  0009               	retfie
  1312  0159                     __end_of_extInterrupt:	
  1313                           
  1314                           	psect	intentry
  1315  0004                     __pintentry:	
  1316                           ;incstack = 0
  1317                           ; Regs used in _extInterrupt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1318                           
  1319  0004                     interrupt_function:	
  1320  004E                     saved_w	set	btemp
  1321  0004  00CE               	movwf	btemp
  1322  0005  0E03               	swapf	3,w
  1323  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1324  0007  0090               	movwf	??_extInterrupt+3
  1325  0008  0804               	movf	4,w
  1326  0009  0091               	movwf	??_extInterrupt+4
  1327  000A  080A               	movf	10,w
  1328  000B  0092               	movwf	??_extInterrupt+5
  1329  000C  084F               	movf	btemp+1,w
  1330  000D  0093               	movwf	??_extInterrupt+6
  1331  000E  28C6               	ljmp	_extInterrupt
  1332                           
  1333                           	psect	text6
  1334  01C0                     __ptext6:	
  1335 ;; *************** function _outputTime *****************
  1336 ;; Defined at:
  1337 ;;		line 247 in file "Functions.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;		None
  1340 ;; Auto vars:     Size  Location     Type
  1341 ;;		None
  1342 ;; Return value:  Size  Location     Type
  1343 ;;                  1    wreg      void 
  1344 ;; Registers used:
  1345 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1346 ;; Tracked objects:
  1347 ;;		On entry : 0/0
  1348 ;;		On exit  : 0/0
  1349 ;;		Unchanged: 0/0
  1350 ;; Data sizes:     COMMON   BANK0
  1351 ;;      Params:         0       0
  1352 ;;      Locals:         0       0
  1353 ;;      Temps:          0       0
  1354 ;;      Totals:         0       0
  1355 ;;Total ram usage:        0 bytes
  1356 ;; Hardware stack levels used:    1
  1357 ;; Hardware stack levels required when called:    1
  1358 ;; This function calls:
  1359 ;;		_setDisplayOutput
  1360 ;; This function is called by:
  1361 ;;		_extInterrupt
  1362 ;; This function uses a non-reentrant model
  1363 ;;
  1364                           
  1365                           
  1366                           ;psect for function _outputTime
  1367  01C0                     _outputTime:	
  1368                           
  1369                           ;Functions.c: 250: PORTA = 0b0001;
  1370                           
  1371                           ;incstack = 0
  1372                           ; Regs used in _outputTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1373  01C0  3001               	movlw	1
  1374  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  1375  01C2  0085               	movwf	5	;volatile
  1376                           
  1377                           ;Functions.c: 251: setDisplayOutput(hourTens);
  1378  01C3  0822               	movf	_hourTens,w
  1379  01C4  2159               	fcall	_setDisplayOutput
  1380                           
  1381                           ;Functions.c: 252: PORTA = 0b0010;
  1382  01C5  3002               	movlw	2
  1383  01C6  1283               	bcf	3,5	;RP0=0, select bank0
  1384  01C7  0085               	movwf	5	;volatile
  1385                           
  1386                           ;Functions.c: 253: setDisplayOutput(minTens);
  1387  01C8  0820               	movf	_minTens,w
  1388  01C9  2159               	fcall	_setDisplayOutput
  1389                           
  1390                           ;Functions.c: 254: PORTA = 0b0100;
  1391  01CA  3004               	movlw	4
  1392  01CB  1283               	bcf	3,5	;RP0=0, select bank0
  1393  01CC  0085               	movwf	5	;volatile
  1394                           
  1395                           ;Functions.c: 255: setDisplayOutput(minUnits);
  1396  01CD  081F               	movf	_minUnits,w
  1397  01CE  2159               	fcall	_setDisplayOutput
  1398                           
  1399                           ;Functions.c: 256: PORTA = 0b1000;
  1400  01CF  3008               	movlw	8
  1401  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1402  01D1  0085               	movwf	5	;volatile
  1403                           
  1404                           ;Functions.c: 257: setDisplayOutput(hourUnits);
  1405  01D2  0821               	movf	_hourUnits,w
  1406  01D3  2159               	fcall	_setDisplayOutput
  1407  01D4  0008               	return
  1408  01D5                     __end_of_outputTime:	
  1409                           
  1410                           	psect	text7
  1411  0159                     __ptext7:	
  1412 ;; *************** function _setDisplayOutput *****************
  1413 ;; Defined at:
  1414 ;;		line 92 in file "Functions.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;  number          1    wreg     char 
  1417 ;; Auto vars:     Size  Location     Type
  1418 ;;  number          1    0[BANK0 ] char 
  1419 ;; Return value:  Size  Location     Type
  1420 ;;                  1    wreg      void 
  1421 ;; Registers used:
  1422 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1423 ;; Tracked objects:
  1424 ;;		On entry : 0/0
  1425 ;;		On exit  : 0/0
  1426 ;;		Unchanged: 0/0
  1427 ;; Data sizes:     COMMON   BANK0
  1428 ;;      Params:         0       0
  1429 ;;      Locals:         0       1
  1430 ;;      Temps:          0       0
  1431 ;;      Totals:         0       1
  1432 ;;Total ram usage:        1 bytes
  1433 ;; Hardware stack levels used:    1
  1434 ;; This function calls:
  1435 ;;		Nothing
  1436 ;; This function is called by:
  1437 ;;		_outputTime
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           
  1442                           ;psect for function _setDisplayOutput
  1443  0159                     _setDisplayOutput:	
  1444                           
  1445                           ;incstack = 0
  1446                           ; Regs used in _setDisplayOutput: [wreg-fsr0h+status,2+status,0]
  1447                           ;setDisplayOutput@number stored from wreg
  1448  0159  1283               	bcf	3,5	;RP0=0, select bank0
  1449  015A  008C               	movwf	setDisplayOutput@number
  1450                           
  1451                           ;Functions.c: 94: switch (number){
  1452  015B  2980               	goto	i1l941
  1453  015C                     i1l915:	
  1454                           ;Functions.c: 95: case 0 :
  1455                           
  1456                           
  1457                           ;Functions.c: 96: PORTB = 0b11111100;
  1458  015C  30FC               	movlw	252
  1459  015D  0086               	movwf	6	;volatile
  1460                           
  1461                           ;Functions.c: 97: break;
  1462  015E  0008               	return
  1463  015F                     i1l917:	
  1464                           ;Functions.c: 98: case 1 :
  1465                           
  1466                           
  1467                           ;Functions.c: 99: PORTB = 0b01100000;
  1468  015F  3060               	movlw	96
  1469  0160  0086               	movwf	6	;volatile
  1470                           
  1471                           ;Functions.c: 100: break;
  1472  0161  0008               	return
  1473  0162                     i1l919:	
  1474                           ;Functions.c: 101: case 2 :
  1475                           
  1476                           
  1477                           ;Functions.c: 102: PORTB = 0b11011100;
  1478  0162  30DC               	movlw	220
  1479  0163  0086               	movwf	6	;volatile
  1480                           
  1481                           ;Functions.c: 103: break;
  1482  0164  0008               	return
  1483  0165                     i1l921:	
  1484                           ;Functions.c: 104: case 3 :
  1485                           
  1486                           
  1487                           ;Functions.c: 105: PORTB = 0b11110010;
  1488  0165  30F2               	movlw	242
  1489  0166  0086               	movwf	6	;volatile
  1490                           
  1491                           ;Functions.c: 106: break;
  1492  0167  0008               	return
  1493  0168                     i1l923:	
  1494                           ;Functions.c: 107: case 4 :
  1495                           
  1496                           
  1497                           ;Functions.c: 108: PORTB = 0b01100110;
  1498  0168  3066               	movlw	102
  1499  0169  0086               	movwf	6	;volatile
  1500                           
  1501                           ;Functions.c: 109: break;
  1502  016A  0008               	return
  1503  016B                     i1l925:	
  1504                           ;Functions.c: 110: case 5 :
  1505                           
  1506                           
  1507                           ;Functions.c: 111: PORTB = 0b10110110;
  1508  016B  30B6               	movlw	182
  1509  016C  0086               	movwf	6	;volatile
  1510                           
  1511                           ;Functions.c: 112: break;
  1512  016D  0008               	return
  1513  016E                     i1l927:	
  1514                           ;Functions.c: 113: case 6 :
  1515                           
  1516                           
  1517                           ;Functions.c: 114: PORTB = 0b10111110;
  1518  016E  30BE               	movlw	190
  1519  016F  0086               	movwf	6	;volatile
  1520                           
  1521                           ;Functions.c: 115: break;
  1522  0170  0008               	return
  1523  0171                     i1l929:	
  1524                           ;Functions.c: 116: case 7 :
  1525                           
  1526                           
  1527                           ;Functions.c: 117: PORTB = 0b11100000;
  1528  0171  30E0               	movlw	224
  1529  0172  0086               	movwf	6	;volatile
  1530                           
  1531                           ;Functions.c: 118: break;
  1532  0173  0008               	return
  1533  0174                     i1l931:	
  1534                           ;Functions.c: 119: case 8 :
  1535                           
  1536                           
  1537                           ;Functions.c: 120: PORTB = 0b11111110;
  1538  0174  30FE               	movlw	254
  1539  0175  0086               	movwf	6	;volatile
  1540                           
  1541                           ;Functions.c: 121: break;
  1542  0176  0008               	return
  1543  0177                     i1l933:	
  1544                           ;Functions.c: 122: case 9 :
  1545                           
  1546                           
  1547                           ;Functions.c: 123: PORTB = 0b1110011;
  1548  0177  3073               	movlw	115
  1549  0178  0086               	movwf	6	;volatile
  1550                           
  1551                           ;Functions.c: 124: break;
  1552  0179  0008               	return
  1553  017A                     i1l935:	
  1554                           ;Functions.c: 125: case 10 :
  1555                           
  1556                           
  1557                           ;Functions.c: 126: PORTB = 0b10001110;
  1558  017A  308E               	movlw	142
  1559  017B  0086               	movwf	6	;volatile
  1560                           
  1561                           ;Functions.c: 127: break;
  1562  017C  0008               	return
  1563  017D                     i1l937:	
  1564                           ;Functions.c: 128: default :
  1565                           
  1566                           
  1567                           ;Functions.c: 129: PORTB = 0b00000010;
  1568  017D  3002               	movlw	2
  1569  017E  0086               	movwf	6	;volatile
  1570                           
  1571                           ;Functions.c: 132: }
  1572                           
  1573                           ;Functions.c: 130: break;
  1574  017F  0008               	return
  1575  0180                     i1l941:	
  1576  0180  080C               	movf	setDisplayOutput@number,w
  1577                           
  1578                           ; Switch size 1, requested type "space"
  1579                           ; Number of cases is 11, Range of values is 0 to 10
  1580                           ; switch strategies available:
  1581                           ; Name         Instructions Cycles
  1582                           ; direct_byte           17     6 (fixed)
  1583                           ; simple_byte           34    18 (average)
  1584                           ; jumptable            260     6 (fixed)
  1585                           ;	Chosen strategy is direct_byte
  1586  0181  0084               	movwf	4
  1587  0182  300B               	movlw	11
  1588  0183  0204               	subwf	4,w
  1589  0184  1803               	skipnc
  1590  0185  297D               	goto	i1l937
  1591  0186  3001               	movlw	high i1S1203
  1592  0187  008A               	movwf	10
  1593  0188  30E6               	movlw	low i1S1203
  1594  0189  0704               	addwf	4,w
  1595  018A  0082               	movwf	2
  1596  018B  0008               	return
  1597  018C                     __end_of_setDisplayOutput:	
  1598  004E                     btemp	set	78	;btemp
  1599  004E                     wtemp0	set	78
  1600                           
  1601                           	psect	swtext3
  1602  01E6                     __pswtext3:	
  1603  01E6                     i1S1203:	
  1604  01E6  295C               	ljmp	i1l915
  1605  01E7  295F               	ljmp	i1l917
  1606  01E8  2962               	ljmp	i1l919
  1607  01E9  2965               	ljmp	i1l921
  1608  01EA  2968               	ljmp	i1l923
  1609  01EB  296B               	ljmp	i1l925
  1610  01EC  296E               	ljmp	i1l927
  1611  01ED  2971               	ljmp	i1l929
  1612  01EE  2974               	ljmp	i1l931
  1613  01EF  2977               	ljmp	i1l933
  1614  01F0  297A               	ljmp	i1l935


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     13      25

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _extInterrupt in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_updateTime

Critical Paths under _extInterrupt in BANK0

    _outputTime->_setDisplayOutput

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     142
                                             12 BANK0      1     1      0
                               _init
                            _minMark
                          _resetTime
                         _updateTime
 ---------------------------------------------------------------------------------
 (1) _updateTime                                           4     3      1     142
                                              8 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _resetTime                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _minMark                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _extInterrupt                                         7     7      0      22
                                              1 BANK0      7     7      0
                         _outputTime
 ---------------------------------------------------------------------------------
 (3) _outputTime                                           0     0      0      22
                   _setDisplayOutput
 ---------------------------------------------------------------------------------
 (4) _setDisplayOutput                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
   _minMark
   _resetTime
   _updateTime

 _extInterrupt (ROOT)
   _outputTime
     _setDisplayOutput

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               42      D      19       3       37.9%
ABS                  0      0      19       4        0.0%
BITBANK0            42      0       0       5        0.0%
DATA                 0      0      19       6        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Apr 01 11:54:45 2018

               __CFG_CP$ON 0000                          pc 0002                         fsr 0004  
                      l135 004C                        l129 0034                        l154 008A  
                      l148 0072                        l981 01A1                        l975 0197  
                      l991 0037                        l969 018F                        l993 0039  
                      l989 0032                        l997 003E                        l999 004A  
                      _RB0 0030  __size_of_setDisplayOutput 0033                        fsr0 0004  
                      indf 0000               __CFG_FOSC$XT 0000                       S1201 0200  
                     S1199 01F1                       l1001 004F                       l1011 0059  
                     l1003 0051                       l1013 005B                       l1005 0053  
                     l1021 0064                       l1023 0070                       l1015 005D  
                     l1007 0055                       l1031 007C                       l1041 009C  
                     l1033 0088                       l1025 0075                       l1017 005F  
                     l1009 0057                       l1051 00B5                       l1043 00A1  
                     l1035 008D                       l1027 0077                       l1045 00A6  
                     l1037 0092                       l1047 00AB                       l1039 0097  
                     l1055 00BA                       l1049 00B0                       l1083 01D8  
                     _T0IE 005D                       _T0IF 005A                       _INTE 005C  
                     _INTF 0059                       i1l94 014D                       i1l89 0136  
                     _TMR0 0001                       _main 01D5                       _init 01A8  
                     btemp 004E                       start 000F           updateTime@bcdMin 0014  
                    ?_main 000C                      ?_init 000C              __CFG_WDTE$OFF 0000  
                    i1l921 0165                      i1l931 0174                      i1l923 0168  
                    i1l915 015C                      i1l933 0177                      i1l925 016B  
                    i1l917 015F                      i1l941 0180                      i1l935 017A  
                    i1l927 016E                      i1l919 0162                      i1l937 017D  
                    i1l929 0171                      u31_27 00D8                      u24_25 00E6  
                    u32_27 012E                      u25_25 00F2                      u26_25 010C  
                    _PORTA 0005                      _PORTB 0006                      u27_25 0118  
                    _TRISA 0085                      _TRISB 0086            __end_of_minMark 01A8  
                    _secNo 001D                      pclath 000A                      status 0003  
                    wtemp0 004E            __initialization 0010               __end_of_main 01E6  
             __end_of_init 01C0          updateTime@bcdHour 0017                     ??_main 0018  
                   ??_init 0000                     i1S1203 01E6              ?_extInterrupt 000C  
                   i1l1111 0127                     i1l1105 0102                     i1l1127 014C  
                   _INTCON 000B                     _bcdMin 0024                     _synced 0019  
         _setDisplayOutput 0159                  ??_minMark 0000                     saved_w 004E  
           ??_extInterrupt 000D    __end_of__initialization 0015             __pcstackCOMMON 0000  
               __pbssBANK0 0019                 __pmaintext 01D5                 __pintentry 0004  
       __size_of_resetTime 0006       __end_of_extInterrupt 0159                    _bcdHour 0023  
                  __ptext1 0017                    __ptext2 0212                    __ptext3 018C  
                  __ptext4 01A8                    __ptext5 00C6                    __ptext6 01C0  
                  __ptext7 0159                    _minMark 018C                    _minTens 0020  
                  clrloop0 020B       end_of_initialization 0015          __end_of_resetTime 0218  
 __end_of_setDisplayOutput 018C                 _timerCount 001B                 _updateTime 0017  
               _outputTime 01C0        start_initialization 0010      __size_of_extInterrupt 0093  
                ___latbits 0000              __pcstackBANK0 000C                ?_updateTime 0014  
             _extInterrupt 00C6      updateTime@hourTensDis 0016                ?_outputTime 000C  
                __pswtext1 01F1                  __pswtext2 0200                  __pswtext3 01E6  
                 ?_minMark 000C                  _hourUnits 0021          interrupt_function 0004  
                clear_ram0 020A          ?_setDisplayOutput 000C                  _resetTime 0212  
       ??_setDisplayOutput 0000        __size_of_updateTime 00AF        __size_of_outputTime 0015  
               ?_resetTime 000C           __size_of_minMark 001C                   _minUnits 001F  
            __size_of_main 0011              __size_of_init 0018                   _hourTens 0022  
             ??_updateTime 0015     setDisplayOutput@number 000C                   intlevel1 0000  
             ??_outputTime 0000                ??_resetTime 0000         __end_of_updateTime 00C6  
               _OPTION_REG 0081         __end_of_outputTime 01D5  
