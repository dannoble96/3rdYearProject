

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue May 01 03:56:33 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F84A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	clrtext,global,class=CODE,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	swtext1,local,class=CONST,delta=2
    19                           	dabs	1,0x4E,2
    20  0000                     
    21                           ; Version 1.44
    22                           ; Generated 14/09/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F84A Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  0081                     	;# 
    67  0085                     	;# 
    68  0086                     	;# 
    69  0088                     	;# 
    70  0089                     	;# 
    71  0000                     	;# 
    72  0001                     	;# 
    73  0002                     	;# 
    74  0003                     	;# 
    75  0004                     	;# 
    76  0005                     	;# 
    77  0006                     	;# 
    78  0008                     	;# 
    79  0009                     	;# 
    80  000A                     	;# 
    81  000B                     	;# 
    82  0081                     	;# 
    83  0085                     	;# 
    84  0086                     	;# 
    85  0088                     	;# 
    86  0089                     	;# 
    87  0005                     _PORTA	set	5
    88  0006                     _PORTB	set	6
    89  0001                     _TMR0	set	1
    90  000B                     _INTCON	set	11
    91  005A                     _T0IF	set	90
    92  005D                     _T0IE	set	93
    93  0030                     _RB0	set	48
    94  0059                     _INTF	set	89
    95  005C                     _INTE	set	92
    96  0085                     _TRISA	set	133
    97  0086                     _TRISB	set	134
    98  0081                     _OPTION_REG	set	129
    99                           
   100                           ; #config settings
   101  0000                     
   102                           	psect	cinit
   103  0010                     start_initialization:	
   104  0010                     __initialization:	
   105                           
   106                           ; Clear objects allocated to BANK0
   107  0010  1383               	bcf	3,7	;select IRP bank0
   108  0011  300C               	movlw	low __pbssBANK0
   109  0012  0084               	movwf	4
   110  0013  3018               	movlw	low (__pbssBANK0+12)
   111  0014  219B               	fcall	clear_ram0
   112  0015                     end_of_initialization:	
   113                           ;End of C runtime variable initialization code
   114                           
   115  0015                     __end_of__initialization:	
   116  0015  0183               	clrf	3
   117  0016  297F               	ljmp	_main	;jump to C main() function
   118                           
   119                           	psect	bssBANK0
   120  000C                     __pbssBANK0:	
   121  000C                     _synced:	
   122  000C                     	ds	2
   123  000E                     _timerCount:	
   124  000E                     	ds	2
   125  0010                     _secNo:	
   126  0010                     	ds	2
   127  0012                     _minUnits:	
   128  0012                     	ds	1
   129  0013                     _minTens:	
   130  0013                     	ds	1
   131  0014                     _hourUnits:	
   132  0014                     	ds	1
   133  0015                     _hourTens:	
   134  0015                     	ds	1
   135  0016                     _bcdHour:	
   136  0016                     	ds	1
   137  0017                     _bcdMin:	
   138  0017                     	ds	1
   139                           
   140                           	psect	clrtext
   141  019B                     clear_ram0:	
   142                           ;	Called with FSR containing the base address, and
   143                           ;	W with the last address+1
   144                           
   145  019B  0064               	clrwdt	;clear the watchdog before getting into this loop
   146  019C                     clrloop0:	
   147  019C  0180               	clrf	0	;clear RAM location pointed to by FSR
   148  019D  0A84               	incf	4,f	;increment pointer
   149  019E  0604               	xorwf	4,w	;XOR with final address
   150  019F  1903               	btfsc	3,2	;have we reached the end yet?
   151  01A0  3400               	retlw	0	;all done for this memory range, return
   152  01A1  0604               	xorwf	4,w	;XOR again to restore value
   153  01A2  299C               	goto	clrloop0	;do the next byte
   154                           
   155                           	psect	cstackCOMMON
   156  0000                     __pcstackCOMMON:	
   157  0000                     ??_init:	
   158  0000                     ??_resetTime:	
   159                           ; 1 bytes @ 0x0
   160                           
   161  0000                     ??_minMark:	
   162                           ; 1 bytes @ 0x0
   163                           
   164  0000                     ??_outputTime:	
   165                           ; 1 bytes @ 0x0
   166                           
   167  0000                     ??_setDisplayOutput:	
   168                           ; 1 bytes @ 0x0
   169                           
   170                           
   171                           	psect	cstackBANK0
   172  0018                     __pcstackBANK0:	
   173                           ; 1 bytes @ 0x0
   174                           
   175  0018                     ?_init:	
   176  0018                     ?_resetTime:	
   177                           ; 1 bytes @ 0x0
   178                           
   179  0018                     ?_minMark:	
   180                           ; 1 bytes @ 0x0
   181                           
   182  0018                     ?_outputTime:	
   183                           ; 1 bytes @ 0x0
   184                           
   185  0018                     ?_extInterrupt:	
   186                           ; 1 bytes @ 0x0
   187                           
   188  0018                     ?_setDisplayOutput:	
   189                           ; 1 bytes @ 0x0
   190                           
   191  0018                     ?_main:	
   192                           ; 1 bytes @ 0x0
   193                           
   194  0018                     setDisplayOutput@number:	
   195                           ; 2 bytes @ 0x0
   196                           
   197                           
   198                           ; 1 bytes @ 0x0
   199  0018                     	ds	1
   200  0019                     ??_extInterrupt:	
   201                           
   202                           ; 1 bytes @ 0x1
   203  0019                     	ds	7
   204  0020                     ?_updateTime:	
   205  0020                     updateTime@bcdMin:	
   206                           ; 1 bytes @ 0x8
   207                           
   208                           
   209                           ; 1 bytes @ 0x8
   210  0020                     	ds	1
   211  0021                     ??_updateTime:	
   212                           
   213                           ; 1 bytes @ 0x9
   214  0021                     	ds	1
   215  0022                     updateTime@bcdHour:	
   216                           
   217                           ; 1 bytes @ 0xA
   218  0022                     	ds	1
   219  0023                     ??_main:	
   220                           
   221                           ; 1 bytes @ 0xB
   222  0023                     	ds	1
   223                           
   224                           	psect	maintext
   225  017F                     __pmaintext:	
   226 ;;
   227 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   228 ;;
   229 ;; *************** function _main *****************
   230 ;; Defined at:
   231 ;;		line 12 in file "Main.c"
   232 ;; Parameters:    Size  Location     Type
   233 ;;		None
   234 ;; Auto vars:     Size  Location     Type
   235 ;;		None
   236 ;; Return value:  Size  Location     Type
   237 ;;                  2   30[None  ] int 
   238 ;; Registers used:
   239 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   240 ;; Tracked objects:
   241 ;;		On entry : B00/0
   242 ;;		On exit  : 0/0
   243 ;;		Unchanged: 0/0
   244 ;; Data sizes:     COMMON   BANK0
   245 ;;      Params:         0       0
   246 ;;      Locals:         0       0
   247 ;;      Temps:          0       1
   248 ;;      Totals:         0       1
   249 ;;Total ram usage:        1 bytes
   250 ;; Hardware stack levels required when called:    4
   251 ;; This function calls:
   252 ;;		_init
   253 ;;		_minMark
   254 ;;		_resetTime
   255 ;;		_updateTime
   256 ;; This function is called by:
   257 ;;		Startup code after reset
   258 ;; This function uses a non-reentrant model
   259 ;;
   260                           
   261                           
   262                           ;psect for function _main
   263  017F                     _main:	
   264                           
   265                           ;Main.c: 14: init();
   266                           
   267                           ;incstack = 0
   268                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   269  017F  2152               	fcall	_init
   270                           
   271                           ;Main.c: 15: resetTime();
   272  0180  21A3               	fcall	_resetTime
   273                           
   274                           ;Main.c: 16: minMark();
   275  0181  2136               	fcall	_minMark
   276  0182                     l929:	
   277                           ;Main.c: 18: while(1){
   278                           
   279                           
   280                           ;Main.c: 20: if(secNo == 60){
   281  0182  303C               	movlw	60
   282  0183  1283               	bcf	3,5	;RP0=0, select bank0
   283  0184  0610               	xorwf	_secNo,w
   284  0185  0411               	iorwf	_secNo+1,w
   285  0186  1D03               	btfss	3,2
   286  0187  2982               	goto	l929
   287                           
   288                           ;Main.c: 21: updateTime(bcdHour,bcdMin);
   289  0188  0817               	movf	_bcdMin,w
   290  0189  00A3               	movwf	??_main
   291  018A  0823               	movf	??_main,w
   292  018B  00A0               	movwf	updateTime@bcdMin
   293  018C  0816               	movf	_bcdHour,w
   294  018D  20AA               	fcall	_updateTime
   295                           
   296                           ;Main.c: 22: resetTime();
   297  018E  21A3               	fcall	_resetTime
   298  018F  2982               	goto	l929
   299  0190                     __end_of_main:	
   300                           ;Main.c: 23: }
   301                           ;Main.c: 26: }
   302                           ;Main.c: 30: return;
   303                           
   304                           
   305                           	psect	text1
   306  00AA                     __ptext1:	
   307 ;; *************** function _updateTime *****************
   308 ;; Defined at:
   309 ;;		line 136 in file "Functions.c"
   310 ;; Parameters:    Size  Location     Type
   311 ;;  bcdHour         1    wreg     char 
   312 ;;  bcdMin          1    8[BANK0 ] char 
   313 ;; Auto vars:     Size  Location     Type
   314 ;;  bcdHour         1   10[BANK0 ] char 
   315 ;; Return value:  Size  Location     Type
   316 ;;                  1    wreg      void 
   317 ;; Registers used:
   318 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   319 ;; Tracked objects:
   320 ;;		On entry : 0/0
   321 ;;		On exit  : 0/0
   322 ;;		Unchanged: 0/0
   323 ;; Data sizes:     COMMON   BANK0
   324 ;;      Params:         0       1
   325 ;;      Locals:         0       1
   326 ;;      Temps:          0       1
   327 ;;      Totals:         0       3
   328 ;;Total ram usage:        3 bytes
   329 ;; Hardware stack levels used:    1
   330 ;; Hardware stack levels required when called:    3
   331 ;; This function calls:
   332 ;;		Nothing
   333 ;; This function is called by:
   334 ;;		_main
   335 ;; This function uses a non-reentrant model
   336 ;;
   337                           
   338                           
   339                           ;psect for function _updateTime
   340  00AA                     _updateTime:	
   341                           
   342                           ;incstack = 0
   343                           ; Regs used in _updateTime: [wreg-fsr0h+status,2+status,0]
   344                           ;updateTime@bcdHour stored from wreg
   345  00AA  1283               	bcf	3,5	;RP0=0, select bank0
   346  00AB  00A2               	movwf	updateTime@bcdHour
   347                           
   348                           ;Functions.c: 138: hourTens = (bcdHour & 0b00110000);
   349  00AC  0822               	movf	updateTime@bcdHour,w
   350  00AD  3930               	andlw	48
   351  00AE  00A1               	movwf	??_updateTime
   352  00AF  0821               	movf	??_updateTime,w
   353  00B0  0095               	movwf	_hourTens
   354                           
   355                           ;Functions.c: 139: hourUnits = (bcdHour & 0b00001111);
   356  00B1  0822               	movf	updateTime@bcdHour,w
   357  00B2  390F               	andlw	15
   358  00B3  00A1               	movwf	??_updateTime
   359  00B4  0821               	movf	??_updateTime,w
   360  00B5  0094               	movwf	_hourUnits
   361                           
   362                           ;Functions.c: 140: minTens = (bcdMin & 0b00110000);
   363  00B6  0820               	movf	updateTime@bcdMin,w
   364  00B7  3930               	andlw	48
   365  00B8  00A1               	movwf	??_updateTime
   366  00B9  0821               	movf	??_updateTime,w
   367  00BA  0093               	movwf	_minTens
   368                           
   369                           ;Functions.c: 141: minUnits = (bcdMin & 0b00001111);
   370  00BB  0820               	movf	updateTime@bcdMin,w
   371  00BC  390F               	andlw	15
   372  00BD  00A1               	movwf	??_updateTime
   373  00BE  0821               	movf	??_updateTime,w
   374  00BF  0092               	movwf	_minUnits
   375                           
   376                           ;Functions.c: 143: switch(hourTens){
   377  00C0  28CD               	goto	l887
   378  00C1                     l879:	
   379                           ;Functions.c: 144: case 0b00000000 :
   380                           
   381                           
   382                           ;Functions.c: 145: hourTens = 0;
   383  00C1  0195               	clrf	_hourTens
   384                           
   385                           ;Functions.c: 146: break;
   386  00C2  28D8               	goto	l889
   387  00C3                     l129:	
   388                           ;Functions.c: 147: case 0b00010000 :
   389                           
   390                           
   391                           ;Functions.c: 148: hourTens = 1;
   392  00C3  0195               	clrf	_hourTens
   393  00C4  0A95               	incf	_hourTens,f
   394                           
   395                           ;Functions.c: 149: break;
   396  00C5  28D8               	goto	l889
   397  00C6                     l881:	
   398                           ;Functions.c: 150: case 0b00100000 :
   399                           
   400                           
   401                           ;Functions.c: 151: hourTens = 2;
   402  00C6  3002               	movlw	2
   403  00C7  28C9               	goto	L1
   404  00C8                     l883:	
   405                           ;Functions.c: 153: default :
   406                           
   407                           ;Functions.c: 152: break;
   408                           
   409                           
   410                           ;Functions.c: 154: hourTens = 10;
   411  00C8  300A               	movlw	10
   412  00C9                     L1:	
   413  00C9  00A1               	movwf	??_updateTime
   414  00CA  0821               	movf	??_updateTime,w
   415  00CB  0095               	movwf	_hourTens
   416                           
   417                           ;Functions.c: 156: }
   418                           
   419                           ;Functions.c: 155: break;
   420  00CC  28D8               	goto	l889
   421  00CD                     l887:	
   422  00CD  0815               	movf	_hourTens,w
   423                           
   424                           ; Switch size 1, requested type "space"
   425                           ; Number of cases is 3, Range of values is 0 to 32
   426                           ; switch strategies available:
   427                           ; Name         Instructions Cycles
   428                           ; simple_byte           10     6 (average)
   429                           ; direct_byte           39     6 (fixed)
   430                           ; jumptable            260     6 (fixed)
   431                           ;	Chosen strategy is simple_byte
   432  00CE  3A00               	xorlw	0	; case 0
   433  00CF  1903               	skipnz
   434  00D0  28C1               	goto	l879
   435  00D1  3A10               	xorlw	16	; case 16
   436  00D2  1903               	skipnz
   437  00D3  28C3               	goto	l129
   438  00D4  3A30               	xorlw	48	; case 32
   439  00D5  1903               	skipnz
   440  00D6  28C6               	goto	l881
   441  00D7  28C8               	goto	l883
   442  00D8                     l889:	
   443                           
   444                           ;Functions.c: 158: if (hourUnits < 10)
   445  00D8  0814               	movf	_hourUnits,w
   446  00D9  3A80               	xorlw	128
   447  00DA  3E76               	addlw	-138
   448  00DB  1C03               	btfss	3,0
   449  00DC  28EE               	goto	l903
   450                           
   451                           ;Functions.c: 162: else
   452                           ;Functions.c: 163: {
   453                           ;Functions.c: 164: hourUnits = 10;
   454                           
   455                           ;Functions.c: 161: }
   456  00DD  300A               	movlw	10
   457  00DE  00A1               	movwf	??_updateTime
   458  00DF  0821               	movf	??_updateTime,w
   459  00E0  0094               	movwf	_hourUnits
   460                           
   461                           ;Functions.c: 165: }
   462                           ;Functions.c: 167: switch(minTens){
   463  00E1  28EE               	goto	l903
   464  00E2                     l895:	
   465                           ;Functions.c: 168: case 0b00000000 :
   466                           
   467                           
   468                           ;Functions.c: 169: minTens = 0;
   469  00E2  0193               	clrf	_minTens
   470                           
   471                           ;Functions.c: 170: break;
   472  00E3  28F9               	goto	l905
   473  00E4                     l137:	
   474                           ;Functions.c: 171: case 0b00010000 :
   475                           
   476                           
   477                           ;Functions.c: 172: minTens = 1;
   478  00E4  0193               	clrf	_minTens
   479  00E5  0A93               	incf	_minTens,f
   480                           
   481                           ;Functions.c: 173: break;
   482  00E6  28F9               	goto	l905
   483  00E7                     l897:	
   484                           ;Functions.c: 174: case 0b00100000 :
   485                           
   486                           
   487                           ;Functions.c: 175: minTens = 2;
   488  00E7  3002               	movlw	2
   489  00E8  28EA               	goto	L2
   490  00E9                     l899:	
   491                           ;Functions.c: 177: default :
   492                           
   493                           ;Functions.c: 176: break;
   494                           
   495                           
   496                           ;Functions.c: 178: minTens = 10;
   497  00E9  300A               	movlw	10
   498  00EA                     L2:	
   499  00EA  00A1               	movwf	??_updateTime
   500  00EB  0821               	movf	??_updateTime,w
   501  00EC  0093               	movwf	_minTens
   502                           
   503                           ;Functions.c: 180: }
   504                           
   505                           ;Functions.c: 179: break;
   506  00ED  28F9               	goto	l905
   507  00EE                     l903:	
   508  00EE  0813               	movf	_minTens,w
   509                           
   510                           ; Switch size 1, requested type "space"
   511                           ; Number of cases is 3, Range of values is 0 to 32
   512                           ; switch strategies available:
   513                           ; Name         Instructions Cycles
   514                           ; simple_byte           10     6 (average)
   515                           ; direct_byte           39     6 (fixed)
   516                           ; jumptable            260     6 (fixed)
   517                           ;	Chosen strategy is simple_byte
   518  00EF  3A00               	xorlw	0	; case 0
   519  00F0  1903               	skipnz
   520  00F1  28E2               	goto	l895
   521  00F2  3A10               	xorlw	16	; case 16
   522  00F3  1903               	skipnz
   523  00F4  28E4               	goto	l137
   524  00F5  3A30               	xorlw	48	; case 32
   525  00F6  1903               	skipnz
   526  00F7  28E7               	goto	l897
   527  00F8  28E9               	goto	l899
   528  00F9                     l905:	
   529                           
   530                           ;Functions.c: 183: if (minUnits < 10)
   531  00F9  0812               	movf	_minUnits,w
   532  00FA  3A80               	xorlw	128
   533  00FB  3E76               	addlw	-138
   534  00FC  1C03               	btfss	3,0
   535  00FD  0008               	return
   536                           
   537                           ;Functions.c: 187: else
   538                           ;Functions.c: 188: {
   539                           ;Functions.c: 189: minUnits = 10;
   540                           
   541                           ;Functions.c: 186: }
   542  00FE  300A               	movlw	10
   543  00FF  00A1               	movwf	??_updateTime
   544  0100  0821               	movf	??_updateTime,w
   545  0101  0092               	movwf	_minUnits
   546  0102  0008               	return
   547  0103                     __end_of_updateTime:	
   548                           
   549                           	psect	text2
   550  01A3                     __ptext2:	
   551 ;; *************** function _resetTime *****************
   552 ;; Defined at:
   553 ;;		line 65 in file "Functions.c"
   554 ;; Parameters:    Size  Location     Type
   555 ;;		None
   556 ;; Auto vars:     Size  Location     Type
   557 ;;		None
   558 ;; Return value:  Size  Location     Type
   559 ;;                  1    wreg      void 
   560 ;; Registers used:
   561 ;;		status,2
   562 ;; Tracked objects:
   563 ;;		On entry : 0/0
   564 ;;		On exit  : 0/0
   565 ;;		Unchanged: 0/0
   566 ;; Data sizes:     COMMON   BANK0
   567 ;;      Params:         0       0
   568 ;;      Locals:         0       0
   569 ;;      Temps:          0       0
   570 ;;      Totals:         0       0
   571 ;;Total ram usage:        0 bytes
   572 ;; Hardware stack levels used:    1
   573 ;; Hardware stack levels required when called:    3
   574 ;; This function calls:
   575 ;;		Nothing
   576 ;; This function is called by:
   577 ;;		_main
   578 ;; This function uses a non-reentrant model
   579 ;;
   580                           
   581                           
   582                           ;psect for function _resetTime
   583  01A3                     _resetTime:	
   584                           
   585                           ;Functions.c: 67: bcdMin = 0x00;
   586                           
   587                           ;incstack = 0
   588                           ; Regs used in _resetTime: [status,2]
   589  01A3  1283               	bcf	3,5	;RP0=0, select bank0
   590  01A4  0197               	clrf	_bcdMin
   591                           
   592                           ;Functions.c: 68: bcdHour = 0x00;
   593  01A5  0196               	clrf	_bcdHour
   594                           
   595                           ;Functions.c: 69: secNo = 0;
   596  01A6  0190               	clrf	_secNo
   597  01A7  0191               	clrf	_secNo+1
   598  01A8  0008               	return
   599  01A9                     __end_of_resetTime:	
   600                           ;Functions.c: 70: return;
   601                           
   602                           
   603                           	psect	text3
   604  0136                     __ptext3:	
   605 ;; *************** function _minMark *****************
   606 ;; Defined at:
   607 ;;		line 73 in file "Functions.c"
   608 ;; Parameters:    Size  Location     Type
   609 ;;		None
   610 ;; Auto vars:     Size  Location     Type
   611 ;;		None
   612 ;; Return value:  Size  Location     Type
   613 ;;                  1    wreg      void 
   614 ;; Registers used:
   615 ;;		wreg, status,2, status,0
   616 ;; Tracked objects:
   617 ;;		On entry : 0/0
   618 ;;		On exit  : 0/0
   619 ;;		Unchanged: 0/0
   620 ;; Data sizes:     COMMON   BANK0
   621 ;;      Params:         0       0
   622 ;;      Locals:         0       0
   623 ;;      Temps:          0       0
   624 ;;      Totals:         0       0
   625 ;;Total ram usage:        0 bytes
   626 ;; Hardware stack levels used:    1
   627 ;; Hardware stack levels required when called:    3
   628 ;; This function calls:
   629 ;;		Nothing
   630 ;; This function is called by:
   631 ;;		_main
   632 ;; This function uses a non-reentrant model
   633 ;;
   634                           
   635                           
   636                           ;psect for function _minMark
   637  0136                     _minMark:	
   638                           
   639                           ;Functions.c: 75: synced = 0;
   640                           
   641                           ;incstack = 0
   642                           ; Regs used in _minMark: [wreg+status,2+status,0]
   643  0136  1283               	bcf	3,5	;RP0=0, select bank0
   644  0137  018C               	clrf	_synced
   645  0138  018D               	clrf	_synced+1
   646  0139                     l861:	
   647                           ;Functions.c: 76: do{
   648                           
   649                           
   650                           ;Functions.c: 78: if(RB0 == 1 && synced == 0){
   651  0139  1C06               	btfss	6,0	;volatile
   652  013A  2941               	goto	l867
   653  013B  080C               	movf	_synced,w
   654  013C  040D               	iorwf	_synced+1,w
   655  013D  1D03               	btfss	3,2
   656  013E  2941               	goto	l867
   657                           
   658                           ;Functions.c: 79: INTCON |= 0b00100000;
   659  013F  168B               	bsf	11,5	;volatile
   660                           
   661                           ;Functions.c: 80: }
   662  0140  294B               	goto	l873
   663  0141                     l867:	
   664                           
   665                           ;Functions.c: 81: else{
   666                           ;Functions.c: 82: INTCON = 0b10010000;
   667  0141  3090               	movlw	144
   668  0142  008B               	movwf	11	;volatile
   669                           
   670                           ;Functions.c: 83: TMR0 = 230;
   671  0143  30E6               	movlw	230
   672  0144  0081               	movwf	1	;volatile
   673                           
   674                           ;Functions.c: 84: timerCount = 0;
   675  0145  018E               	clrf	_timerCount
   676  0146  018F               	clrf	_timerCount+1
   677                           
   678                           ;Functions.c: 85: synced = 1;
   679  0147  3001               	movlw	1
   680  0148  008C               	movwf	_synced
   681  0149  3000               	movlw	0
   682  014A  008D               	movwf	_synced+1
   683  014B                     l873:	
   684                           
   685                           ;Functions.c: 86: }
   686                           ;Functions.c: 88: }while (!(RB0 == 1 && synced == 1));
   687  014B  1C06               	btfss	6,0	;volatile
   688  014C  2939               	goto	l861
   689  014D  030C               	decf	_synced,w
   690  014E  040D               	iorwf	_synced+1,w
   691  014F  1903               	btfsc	3,2
   692  0150  0008               	return
   693  0151  2939               	goto	l861
   694  0152                     __end_of_minMark:	
   695                           ;Functions.c: 89: return;
   696                           
   697                           
   698                           	psect	text4
   699  0152                     __ptext4:	
   700 ;; *************** function _init *****************
   701 ;; Defined at:
   702 ;;		line 3 in file "Functions.c"
   703 ;; Parameters:    Size  Location     Type
   704 ;;		None
   705 ;; Auto vars:     Size  Location     Type
   706 ;;		None
   707 ;; Return value:  Size  Location     Type
   708 ;;                  1    wreg      void 
   709 ;; Registers used:
   710 ;;		wreg, status,2
   711 ;; Tracked objects:
   712 ;;		On entry : 0/0
   713 ;;		On exit  : 0/0
   714 ;;		Unchanged: 0/0
   715 ;; Data sizes:     COMMON   BANK0
   716 ;;      Params:         0       0
   717 ;;      Locals:         0       0
   718 ;;      Temps:          0       0
   719 ;;      Totals:         0       0
   720 ;;Total ram usage:        0 bytes
   721 ;; Hardware stack levels used:    1
   722 ;; Hardware stack levels required when called:    3
   723 ;; This function calls:
   724 ;;		Nothing
   725 ;; This function is called by:
   726 ;;		_main
   727 ;; This function uses a non-reentrant model
   728 ;;
   729                           
   730                           
   731                           ;psect for function _init
   732  0152                     _init:	
   733                           
   734                           ;Functions.c: 5: OPTION_REG = 0b01000111;
   735                           
   736                           ;incstack = 0
   737                           ; Regs used in _init: [wreg+status,2]
   738  0152  3047               	movlw	71
   739  0153  1683               	bsf	3,5	;RP0=1, select bank1
   740  0154  0081               	movwf	1	;volatile
   741                           
   742                           ;Functions.c: 7: INTCON = 0b10000000;
   743  0155  3080               	movlw	128
   744  0156  008B               	movwf	11	;volatile
   745                           
   746                           ;Functions.c: 9: TMR0 = 230;
   747  0157  30E6               	movlw	230
   748  0158  1283               	bcf	3,5	;RP0=0, select bank0
   749  0159  0081               	movwf	1	;volatile
   750                           
   751                           ;Functions.c: 11: TRISB = 0b00000001;
   752  015A  3001               	movlw	1
   753  015B  1683               	bsf	3,5	;RP0=1, select bank1
   754  015C  0086               	movwf	6	;volatile
   755                           
   756                           ;Functions.c: 12: PORTB = 0x00;
   757  015D  1283               	bcf	3,5	;RP0=0, select bank0
   758  015E  0186               	clrf	6	;volatile
   759                           
   760                           ;Functions.c: 15: TRISA = 0x00;
   761  015F  1683               	bsf	3,5	;RP0=1, select bank1
   762  0160  0185               	clrf	5	;volatile
   763                           
   764                           ;Functions.c: 16: PORTA = 0x00;
   765  0161  1283               	bcf	3,5	;RP0=0, select bank0
   766  0162  0185               	clrf	5	;volatile
   767                           
   768                           ;Functions.c: 18: bcdMin = 0x00;
   769  0163  0197               	clrf	_bcdMin
   770                           
   771                           ;Functions.c: 19: bcdHour = 0x00;
   772  0164  0196               	clrf	_bcdHour
   773                           
   774                           ;Functions.c: 21: synced = 0;
   775  0165  018C               	clrf	_synced
   776  0166  018D               	clrf	_synced+1
   777                           
   778                           ;Functions.c: 22: INTCON = 0b10010000;
   779  0167  3090               	movlw	144
   780  0168  008B               	movwf	11	;volatile
   781  0169  0008               	return
   782  016A                     __end_of_init:	
   783                           
   784                           	psect	text5
   785  0017                     __ptext5:	
   786 ;; *************** function _extInterrupt *****************
   787 ;; Defined at:
   788 ;;		line 25 in file "Functions.c"
   789 ;; Parameters:    Size  Location     Type
   790 ;;		None
   791 ;; Auto vars:     Size  Location     Type
   792 ;;		None
   793 ;; Return value:  Size  Location     Type
   794 ;;                  1    wreg      void 
   795 ;; Registers used:
   796 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   797 ;; Tracked objects:
   798 ;;		On entry : 0/0
   799 ;;		On exit  : 0/0
   800 ;;		Unchanged: 0/0
   801 ;; Data sizes:     COMMON   BANK0
   802 ;;      Params:         0       0
   803 ;;      Locals:         0       0
   804 ;;      Temps:          0       7
   805 ;;      Totals:         0       7
   806 ;;Total ram usage:        7 bytes
   807 ;; Hardware stack levels used:    1
   808 ;; Hardware stack levels required when called:    2
   809 ;; This function calls:
   810 ;;		_outputTime
   811 ;; This function is called by:
   812 ;;		Interrupt level 1
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816                           
   817                           ;psect for function _extInterrupt
   818  0017                     _extInterrupt:	
   819                           
   820                           ;Functions.c: 27: if (INTE && INTF){
   821  0017  1A0B               	btfsc	11,4	;volatile
   822  0018  1C8B               	btfss	11,1	;volatile
   823  0019  2887               	goto	i1l89
   824                           
   825                           ;Functions.c: 28: INTF = 0;
   826  001A  108B               	bcf	11,1	;volatile
   827                           
   828                           ;Functions.c: 30: if(synced == 1){
   829  001B  030C               	decf	_synced,w
   830  001C  040D               	iorwf	_synced+1,w
   831  001D  1D03               	btfss	3,2
   832  001E  2887               	goto	i1l89
   833                           
   834                           ;Functions.c: 31: secNo++;
   835  001F  3001               	movlw	1
   836  0020  0790               	addwf	_secNo,f
   837  0021  1803               	skipnc
   838  0022  0A91               	incf	_secNo+1,f
   839  0023  3000               	movlw	0
   840  0024  0791               	addwf	_secNo+1,f
   841                           
   842                           ;Functions.c: 32: _delay((unsigned long)((150)*(4000000/4000.0)));
   843  0025  30C3               	movlw	195
   844  0026  009A               	movwf	??_extInterrupt+1
   845  0027  30CD               	movlw	205
   846  0028  0099               	movwf	??_extInterrupt
   847  0029                     u35_27:	
   848  0029  0B99               	decfsz	??_extInterrupt,f
   849  002A  2829               	goto	u35_27
   850  002B  0B9A               	decfsz	??_extInterrupt+1,f
   851  002C  2829               	goto	u35_27
   852                           
   853                           ;Functions.c: 34: if(secNo > 1 && secNo < 6 )
   854  002D  1283               	bcf	3,5	;RP0=0, select bank0
   855  002E  0811               	movf	_secNo+1,w
   856  002F  3A80               	xorlw	128
   857  0030  00CF               	movwf	79
   858  0031  3080               	movlw	128
   859  0032  024F               	subwf	79,w
   860  0033  1D03               	skipz
   861  0034  2837               	goto	u28_25
   862  0035  3002               	movlw	2
   863  0036  0210               	subwf	_secNo,w
   864  0037                     u28_25:	
   865  0037  1C03               	skipc
   866  0038  2853               	goto	i1l951
   867  0039  1283               	bcf	3,5	;RP0=0, select bank0
   868  003A  0811               	movf	_secNo+1,w
   869  003B  3A80               	xorlw	128
   870  003C  00CF               	movwf	79
   871  003D  3080               	movlw	128
   872  003E  024F               	subwf	79,w
   873  003F  1D03               	skipz
   874  0040  2843               	goto	u29_25
   875  0041  3006               	movlw	6
   876  0042  0210               	subwf	_secNo,w
   877  0043                     u29_25:	
   878  0043  1803               	skipnc
   879  0044  2853               	goto	i1l951
   880                           
   881                           ;Functions.c: 35: {
   882                           ;Functions.c: 36: bcdHour |= RB0;
   883  0045  3000               	movlw	0
   884  0046  1283               	bcf	3,5	;RP0=0, select bank0
   885  0047  1806               	btfsc	6,0	;volatile
   886  0048  3001               	movlw	1
   887  0049  0099               	movwf	??_extInterrupt
   888  004A  0819               	movf	??_extInterrupt,w
   889  004B  0496               	iorwf	_bcdHour,f
   890                           
   891                           ;Functions.c: 37: bcdHour = bcdHour << 1;
   892  004C  0816               	movf	_bcdHour,w
   893  004D  0099               	movwf	??_extInterrupt
   894  004E  0719               	addwf	??_extInterrupt,w
   895  004F  009A               	movwf	??_extInterrupt+1
   896  0050  081A               	movf	??_extInterrupt+1,w
   897  0051  0096               	movwf	_bcdHour
   898                           
   899                           ;Functions.c: 38: }
   900  0052  2878               	goto	i1l957
   901  0053                     i1l951:	
   902                           
   903                           ;Functions.c: 39: else if(secNo > 44 && secNo < 60)
   904  0053  1283               	bcf	3,5	;RP0=0, select bank0
   905  0054  0811               	movf	_secNo+1,w
   906  0055  3A80               	xorlw	128
   907  0056  00CF               	movwf	79
   908  0057  3080               	movlw	128
   909  0058  024F               	subwf	79,w
   910  0059  1D03               	skipz
   911  005A  285D               	goto	u30_25
   912  005B  302D               	movlw	45
   913  005C  0210               	subwf	_secNo,w
   914  005D                     u30_25:	
   915  005D  1C03               	skipc
   916  005E  2878               	goto	i1l957
   917  005F  1283               	bcf	3,5	;RP0=0, select bank0
   918  0060  0811               	movf	_secNo+1,w
   919  0061  3A80               	xorlw	128
   920  0062  00CF               	movwf	79
   921  0063  3080               	movlw	128
   922  0064  024F               	subwf	79,w
   923  0065  1D03               	skipz
   924  0066  2869               	goto	u31_25
   925  0067  303C               	movlw	60
   926  0068  0210               	subwf	_secNo,w
   927  0069                     u31_25:	
   928  0069  1803               	skipnc
   929  006A  2878               	goto	i1l957
   930                           
   931                           ;Functions.c: 40: {
   932                           ;Functions.c: 41: bcdMin |= RB0;
   933  006B  3000               	movlw	0
   934  006C  1283               	bcf	3,5	;RP0=0, select bank0
   935  006D  1806               	btfsc	6,0	;volatile
   936  006E  3001               	movlw	1
   937  006F  0099               	movwf	??_extInterrupt
   938  0070  0819               	movf	??_extInterrupt,w
   939  0071  0497               	iorwf	_bcdMin,f
   940                           
   941                           ;Functions.c: 42: bcdMin = bcdMin << 1;
   942  0072  0817               	movf	_bcdMin,w
   943  0073  0099               	movwf	??_extInterrupt
   944  0074  0719               	addwf	??_extInterrupt,w
   945  0075  009A               	movwf	??_extInterrupt+1
   946  0076  081A               	movf	??_extInterrupt+1,w
   947  0077  0097               	movwf	_bcdMin
   948  0078                     i1l957:	
   949                           
   950                           ;Functions.c: 43: }
   951                           ;Functions.c: 44: _delay((unsigned long)((200)*(4000000/4000.0)));
   952  0078  3002               	movlw	2
   953  0079  1283               	bcf	3,5	;RP0=0, select bank0
   954  007A  009B               	movwf	??_extInterrupt+2
   955  007B  3004               	movlw	4
   956  007C  009A               	movwf	??_extInterrupt+1
   957  007D  30BA               	movlw	186
   958  007E  0099               	movwf	??_extInterrupt
   959  007F                     u36_27:	
   960  007F  0B99               	decfsz	??_extInterrupt,f
   961  0080  287F               	goto	u36_27
   962  0081  0B9A               	decfsz	??_extInterrupt+1,f
   963  0082  287F               	goto	u36_27
   964  0083  0B9B               	decfsz	??_extInterrupt+2,f
   965  0084  287F               	goto	u36_27
   966  0085  0000               	nop
   967                           
   968                           ;Functions.c: 45: return;
   969  0086  289E               	goto	i1l94
   970  0087                     i1l89:	
   971                           
   972                           ;Functions.c: 46: }
   973                           ;Functions.c: 48: }
   974                           ;Functions.c: 49: if (T0IE && T0IF){
   975  0087  1A8B               	btfsc	11,5	;volatile
   976  0088  1D0B               	btfss	11,2	;volatile
   977  0089  289E               	goto	i1l94
   978                           
   979                           ;Functions.c: 50: T0IF = 0;
   980  008A  110B               	bcf	11,2	;volatile
   981                           
   982                           ;Functions.c: 51: timerCount++;
   983  008B  3001               	movlw	1
   984  008C  1283               	bcf	3,5	;RP0=0, select bank0
   985  008D  078E               	addwf	_timerCount,f
   986  008E  1803               	skipnc
   987  008F  0A8F               	incf	_timerCount+1,f
   988  0090  3000               	movlw	0
   989  0091  078F               	addwf	_timerCount+1,f
   990                           
   991                           ;Functions.c: 53: if (timerCount == 7){
   992  0092  3007               	movlw	7
   993  0093  060E               	xorwf	_timerCount,w
   994  0094  040F               	iorwf	_timerCount+1,w
   995  0095  1D03               	btfss	3,2
   996  0096  289D               	goto	i1l973
   997                           
   998                           ;Functions.c: 54: timerCount = 0;
   999  0097  018E               	clrf	_timerCount
  1000  0098  018F               	clrf	_timerCount+1
  1001                           
  1002                           ;Functions.c: 56: synced = 1;
  1003  0099  3001               	movlw	1
  1004  009A  008C               	movwf	_synced
  1005  009B  3000               	movlw	0
  1006  009C  008D               	movwf	_synced+1
  1007  009D                     i1l973:	
  1008                           
  1009                           ;Functions.c: 58: }
  1010                           ;Functions.c: 59: outputTime();
  1011  009D  216A               	fcall	_outputTime
  1012  009E                     i1l94:	
  1013  009E  1283               	bcf	3,5	;RP0=0, select bank0
  1014  009F  081F               	movf	??_extInterrupt+6,w
  1015  00A0  00CF               	movwf	79
  1016  00A1  081E               	movf	??_extInterrupt+5,w
  1017  00A2  008A               	movwf	10
  1018  00A3  081D               	movf	??_extInterrupt+4,w
  1019  00A4  0084               	movwf	4
  1020  00A5  0E1C               	swapf	(??_extInterrupt+3)^0,w
  1021  00A6  0083               	movwf	3
  1022  00A7  0ECE               	swapf	78,f
  1023  00A8  0E4E               	swapf	78,w
  1024  00A9  0009               	retfie
  1025  00AA                     __end_of_extInterrupt:	
  1026                           
  1027                           	psect	intentry
  1028  0004                     __pintentry:	
  1029                           ;incstack = 0
  1030                           ; Regs used in _extInterrupt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1031                           
  1032  0004                     interrupt_function:	
  1033  004E                     saved_w	set	btemp
  1034  0004  00CE               	movwf	btemp
  1035  0005  0E03               	swapf	3,w
  1036  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1037  0007  009C               	movwf	??_extInterrupt+3
  1038  0008  0804               	movf	4,w
  1039  0009  009D               	movwf	??_extInterrupt+4
  1040  000A  080A               	movf	10,w
  1041  000B  009E               	movwf	??_extInterrupt+5
  1042  000C  084F               	movf	btemp+1,w
  1043  000D  009F               	movwf	??_extInterrupt+6
  1044  000E  2817               	ljmp	_extInterrupt
  1045                           
  1046                           	psect	text6
  1047  016A                     __ptext6:	
  1048 ;; *************** function _outputTime *****************
  1049 ;; Defined at:
  1050 ;;		line 192 in file "Functions.c"
  1051 ;; Parameters:    Size  Location     Type
  1052 ;;		None
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;		None
  1055 ;; Return value:  Size  Location     Type
  1056 ;;                  1    wreg      void 
  1057 ;; Registers used:
  1058 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1059 ;; Tracked objects:
  1060 ;;		On entry : 0/0
  1061 ;;		On exit  : 0/0
  1062 ;;		Unchanged: 0/0
  1063 ;; Data sizes:     COMMON   BANK0
  1064 ;;      Params:         0       0
  1065 ;;      Locals:         0       0
  1066 ;;      Temps:          0       0
  1067 ;;      Totals:         0       0
  1068 ;;Total ram usage:        0 bytes
  1069 ;; Hardware stack levels used:    1
  1070 ;; Hardware stack levels required when called:    1
  1071 ;; This function calls:
  1072 ;;		_setDisplayOutput
  1073 ;; This function is called by:
  1074 ;;		_extInterrupt
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           
  1079                           ;psect for function _outputTime
  1080  016A                     _outputTime:	
  1081                           
  1082                           ;Functions.c: 195: PORTA = 0b0001;
  1083                           
  1084                           ;incstack = 0
  1085                           ; Regs used in _outputTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1086  016A  3001               	movlw	1
  1087  016B  1283               	bcf	3,5	;RP0=0, select bank0
  1088  016C  0085               	movwf	5	;volatile
  1089                           
  1090                           ;Functions.c: 196: setDisplayOutput(hourTens);
  1091  016D  0815               	movf	_hourTens,w
  1092  016E  2103               	fcall	_setDisplayOutput
  1093                           
  1094                           ;Functions.c: 197: PORTA = 0b0010;
  1095  016F  3002               	movlw	2
  1096  0170  1283               	bcf	3,5	;RP0=0, select bank0
  1097  0171  0085               	movwf	5	;volatile
  1098                           
  1099                           ;Functions.c: 198: setDisplayOutput(minTens);
  1100  0172  0813               	movf	_minTens,w
  1101  0173  2103               	fcall	_setDisplayOutput
  1102                           
  1103                           ;Functions.c: 199: PORTA = 0b0100;
  1104  0174  3004               	movlw	4
  1105  0175  1283               	bcf	3,5	;RP0=0, select bank0
  1106  0176  0085               	movwf	5	;volatile
  1107                           
  1108                           ;Functions.c: 200: setDisplayOutput(minUnits);
  1109  0177  0812               	movf	_minUnits,w
  1110  0178  2103               	fcall	_setDisplayOutput
  1111                           
  1112                           ;Functions.c: 201: PORTA = 0b1000;
  1113  0179  3008               	movlw	8
  1114  017A  1283               	bcf	3,5	;RP0=0, select bank0
  1115  017B  0085               	movwf	5	;volatile
  1116                           
  1117                           ;Functions.c: 202: setDisplayOutput(hourUnits);
  1118  017C  0814               	movf	_hourUnits,w
  1119  017D  2103               	fcall	_setDisplayOutput
  1120  017E  0008               	return
  1121  017F                     __end_of_outputTime:	
  1122                           
  1123                           	psect	text7
  1124  0103                     __ptext7:	
  1125 ;; *************** function _setDisplayOutput *****************
  1126 ;; Defined at:
  1127 ;;		line 92 in file "Functions.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;  number          1    wreg     char 
  1130 ;; Auto vars:     Size  Location     Type
  1131 ;;  number          1    0[BANK0 ] char 
  1132 ;; Return value:  Size  Location     Type
  1133 ;;                  1    wreg      void 
  1134 ;; Registers used:
  1135 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1136 ;; Tracked objects:
  1137 ;;		On entry : 0/0
  1138 ;;		On exit  : 0/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMMON   BANK0
  1141 ;;      Params:         0       0
  1142 ;;      Locals:         0       1
  1143 ;;      Temps:          0       0
  1144 ;;      Totals:         0       1
  1145 ;;Total ram usage:        1 bytes
  1146 ;; Hardware stack levels used:    1
  1147 ;; This function calls:
  1148 ;;		Nothing
  1149 ;; This function is called by:
  1150 ;;		_outputTime
  1151 ;; This function uses a non-reentrant model
  1152 ;;
  1153                           
  1154                           
  1155                           ;psect for function _setDisplayOutput
  1156  0103                     _setDisplayOutput:	
  1157                           
  1158                           ;incstack = 0
  1159                           ; Regs used in _setDisplayOutput: [wreg-fsr0h+status,2+status,0]
  1160                           ;setDisplayOutput@number stored from wreg
  1161  0103  1283               	bcf	3,5	;RP0=0, select bank0
  1162  0104  0098               	movwf	setDisplayOutput@number
  1163                           
  1164                           ;Functions.c: 94: switch (number){
  1165  0105  292A               	goto	i1l833
  1166  0106                     i1l807:	
  1167                           ;Functions.c: 95: case 0 :
  1168                           
  1169                           
  1170                           ;Functions.c: 96: PORTB = 0b11111100;
  1171  0106  30FC               	movlw	252
  1172  0107  0086               	movwf	6	;volatile
  1173                           
  1174                           ;Functions.c: 97: break;
  1175  0108  0008               	return
  1176  0109                     i1l809:	
  1177                           ;Functions.c: 98: case 1 :
  1178                           
  1179                           
  1180                           ;Functions.c: 99: PORTB = 0b01100000;
  1181  0109  3060               	movlw	96
  1182  010A  0086               	movwf	6	;volatile
  1183                           
  1184                           ;Functions.c: 100: break;
  1185  010B  0008               	return
  1186  010C                     i1l811:	
  1187                           ;Functions.c: 101: case 2 :
  1188                           
  1189                           
  1190                           ;Functions.c: 102: PORTB = 0b11011100;
  1191  010C  30DC               	movlw	220
  1192  010D  0086               	movwf	6	;volatile
  1193                           
  1194                           ;Functions.c: 103: break;
  1195  010E  0008               	return
  1196  010F                     i1l813:	
  1197                           ;Functions.c: 104: case 3 :
  1198                           
  1199                           
  1200                           ;Functions.c: 105: PORTB = 0b11110010;
  1201  010F  30F2               	movlw	242
  1202  0110  0086               	movwf	6	;volatile
  1203                           
  1204                           ;Functions.c: 106: break;
  1205  0111  0008               	return
  1206  0112                     i1l815:	
  1207                           ;Functions.c: 107: case 4 :
  1208                           
  1209                           
  1210                           ;Functions.c: 108: PORTB = 0b01100110;
  1211  0112  3066               	movlw	102
  1212  0113  0086               	movwf	6	;volatile
  1213                           
  1214                           ;Functions.c: 109: break;
  1215  0114  0008               	return
  1216  0115                     i1l817:	
  1217                           ;Functions.c: 110: case 5 :
  1218                           
  1219                           
  1220                           ;Functions.c: 111: PORTB = 0b10110110;
  1221  0115  30B6               	movlw	182
  1222  0116  0086               	movwf	6	;volatile
  1223                           
  1224                           ;Functions.c: 112: break;
  1225  0117  0008               	return
  1226  0118                     i1l819:	
  1227                           ;Functions.c: 113: case 6 :
  1228                           
  1229                           
  1230                           ;Functions.c: 114: PORTB = 0b10111110;
  1231  0118  30BE               	movlw	190
  1232  0119  0086               	movwf	6	;volatile
  1233                           
  1234                           ;Functions.c: 115: break;
  1235  011A  0008               	return
  1236  011B                     i1l821:	
  1237                           ;Functions.c: 116: case 7 :
  1238                           
  1239                           
  1240                           ;Functions.c: 117: PORTB = 0b11100000;
  1241  011B  30E0               	movlw	224
  1242  011C  0086               	movwf	6	;volatile
  1243                           
  1244                           ;Functions.c: 118: break;
  1245  011D  0008               	return
  1246  011E                     i1l823:	
  1247                           ;Functions.c: 119: case 8 :
  1248                           
  1249                           
  1250                           ;Functions.c: 120: PORTB = 0b11111110;
  1251  011E  30FE               	movlw	254
  1252  011F  0086               	movwf	6	;volatile
  1253                           
  1254                           ;Functions.c: 121: break;
  1255  0120  0008               	return
  1256  0121                     i1l825:	
  1257                           ;Functions.c: 122: case 9 :
  1258                           
  1259                           
  1260                           ;Functions.c: 123: PORTB = 0b1110011;
  1261  0121  3073               	movlw	115
  1262  0122  0086               	movwf	6	;volatile
  1263                           
  1264                           ;Functions.c: 124: break;
  1265  0123  0008               	return
  1266  0124                     i1l827:	
  1267                           ;Functions.c: 125: case 10 :
  1268                           
  1269                           
  1270                           ;Functions.c: 126: PORTB = 0b10001110;
  1271  0124  308E               	movlw	142
  1272  0125  0086               	movwf	6	;volatile
  1273                           
  1274                           ;Functions.c: 127: break;
  1275  0126  0008               	return
  1276  0127                     i1l829:	
  1277                           ;Functions.c: 128: default :
  1278                           
  1279                           
  1280                           ;Functions.c: 129: PORTB = 0b00000010;
  1281  0127  3002               	movlw	2
  1282  0128  0086               	movwf	6	;volatile
  1283                           
  1284                           ;Functions.c: 132: }
  1285                           
  1286                           ;Functions.c: 130: break;
  1287  0129  0008               	return
  1288  012A                     i1l833:	
  1289  012A  0818               	movf	setDisplayOutput@number,w
  1290                           
  1291                           ; Switch size 1, requested type "space"
  1292                           ; Number of cases is 11, Range of values is 0 to 10
  1293                           ; switch strategies available:
  1294                           ; Name         Instructions Cycles
  1295                           ; direct_byte           17     6 (fixed)
  1296                           ; simple_byte           34    18 (average)
  1297                           ; jumptable            260     6 (fixed)
  1298                           ;	Chosen strategy is direct_byte
  1299  012B  0084               	movwf	4
  1300  012C  300B               	movlw	11
  1301  012D  0204               	subwf	4,w
  1302  012E  1803               	skipnc
  1303  012F  2927               	goto	i1l829
  1304  0130  3001               	movlw	high i1S1005
  1305  0131  008A               	movwf	10
  1306  0132  3090               	movlw	low i1S1005
  1307  0133  0704               	addwf	4,w
  1308  0134  0082               	movwf	2
  1309  0135  0008               	return
  1310  0136                     __end_of_setDisplayOutput:	
  1311  004E                     btemp	set	78	;btemp
  1312  004E                     wtemp0	set	78
  1313                           
  1314                           	psect	swtext1
  1315  0190                     __pswtext1:	
  1316  0190                     i1S1005:	
  1317  0190  2906               	ljmp	i1l807
  1318  0191  2909               	ljmp	i1l809
  1319  0192  290C               	ljmp	i1l811
  1320  0193  290F               	ljmp	i1l813
  1321  0194  2912               	ljmp	i1l815
  1322  0195  2915               	ljmp	i1l817
  1323  0196  2918               	ljmp	i1l819
  1324  0197  291B               	ljmp	i1l821
  1325  0198  291E               	ljmp	i1l823
  1326  0199  2921               	ljmp	i1l825
  1327  019A  2924               	ljmp	i1l827


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     12      24

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _extInterrupt in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_updateTime

Critical Paths under _extInterrupt in BANK0

    _outputTime->_setDisplayOutput

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     141
                                             11 BANK0      1     1      0
                               _init
                            _minMark
                          _resetTime
                         _updateTime
 ---------------------------------------------------------------------------------
 (1) _updateTime                                           3     2      1     141
                                              8 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _resetTime                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _minMark                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _extInterrupt                                         7     7      0      22
                                              1 BANK0      7     7      0
                         _outputTime
 ---------------------------------------------------------------------------------
 (3) _outputTime                                           0     0      0      22
                   _setDisplayOutput
 ---------------------------------------------------------------------------------
 (4) _setDisplayOutput                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
   _minMark
   _resetTime
   _updateTime

 _extInterrupt (ROOT)
   _outputTime
     _setDisplayOutput

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               42      C      18       3       36.4%
ABS                  0      0      18       4        0.0%
BITBANK0            42      0       0       5        0.0%
DATA                 0      0      18       6        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue May 01 03:56:33 2018

               __CFG_CP$ON 0000                          pc 0002                         fsr 0004  
                      l137 00E4                        l129 00C3                        l903 00EE  
                      l905 00F9                        l861 0139                        l873 014B  
                      l881 00C6                        l929 0182                        l867 0141  
                      l883 00C8                        l895 00E2                        l879 00C1  
                      l887 00CD                        l897 00E7                        l889 00D8  
                      l899 00E9                        _RB0 0030  __size_of_setDisplayOutput 0033  
                      fsr0 0004                        indf 0000               __CFG_FOSC$XT 0000  
                     _T0IE 005D                       _T0IF 005A                       _INTE 005C  
                     _INTF 0059                       i1l94 009E                       i1l89 0087  
                     _TMR0 0001                       _main 017F                       _init 0152  
                     btemp 004E                       start 000F           updateTime@bcdMin 0020  
                    ?_main 0018                      ?_init 0018              __CFG_WDTE$OFF 0000  
                    i1l811 010C                      i1l821 011B                      i1l813 010F  
                    i1l823 011E                      i1l815 0112                      i1l807 0106  
                    i1l825 0121                      i1l817 0115                      i1l809 0109  
                    i1l833 012A                      i1l827 0124                      i1l819 0118  
                    i1l829 0127                      i1l951 0053                      i1l973 009D  
                    i1l957 0078                      u30_25 005D                      u31_25 0069  
                    _PORTA 0005                      _PORTB 0006                      u35_27 0029  
                    u28_25 0037                      u36_27 007F                      u29_25 0043  
                    _TRISA 0085                      _TRISB 0086            __end_of_minMark 0152  
                    _secNo 0010                      pclath 000A                      status 0003  
                    wtemp0 004E            __initialization 0010               __end_of_main 0190  
             __end_of_init 016A          updateTime@bcdHour 0022                     ??_main 0023  
                   ??_init 0000                     i1S1005 0190              ?_extInterrupt 0018  
                   _INTCON 000B                     _bcdMin 0017                     _synced 000C  
         _setDisplayOutput 0103                  ??_minMark 0000                     saved_w 004E  
           ??_extInterrupt 0019    __end_of__initialization 0015             __pcstackCOMMON 0000  
               __pbssBANK0 000C                 __pmaintext 017F                 __pintentry 0004  
       __size_of_resetTime 0006       __end_of_extInterrupt 00AA                    _bcdHour 0016  
                  __ptext1 00AA                    __ptext2 01A3                    __ptext3 0136  
                  __ptext4 0152                    __ptext5 0017                    __ptext6 016A  
                  __ptext7 0103                    _minMark 0136                    _minTens 0013  
                  clrloop0 019C       end_of_initialization 0015          __end_of_resetTime 01A9  
 __end_of_setDisplayOutput 0136                 _timerCount 000E                 _updateTime 00AA  
               _outputTime 016A        start_initialization 0010      __size_of_extInterrupt 0093  
                ___latbits 0000              __pcstackBANK0 0018                ?_updateTime 0020  
             _extInterrupt 0017                ?_outputTime 0018                  __pswtext1 0190  
                 ?_minMark 0018                  _hourUnits 0014          interrupt_function 0004  
                clear_ram0 019B          ?_setDisplayOutput 0018                  _resetTime 01A3  
       ??_setDisplayOutput 0000        __size_of_updateTime 0059        __size_of_outputTime 0015  
               ?_resetTime 0018           __size_of_minMark 001C                   _minUnits 0012  
            __size_of_main 0011              __size_of_init 0018                   _hourTens 0015  
             ??_updateTime 0021     setDisplayOutput@number 0018                   intlevel1 0000  
             ??_outputTime 0000                ??_resetTime 0000         __end_of_updateTime 0103  
               _OPTION_REG 0081         __end_of_outputTime 017F  
